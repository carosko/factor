.. _running_factor:

Running Factor
==============

Factor can be run with::

    $ runfactor factor.parset

where ``factor.parset`` is the parset discussed above.

You can check the progress of a run with::

    $ checkfactor factor.parset

.. note::

    A number of ``checkfactor`` options are configurable in the Factor parset (see :ref:`parset_checkfactor_options`).

A brief overview of the initialization, processing, and output generated by Factor are described below.


Initialization
--------------

Factor will begin by checking the input measurement sets and the direction-independent instrument tables. If the instrument tables contain real/imaginary values, they are converted the phase/amplitude. The input measurement sets are chunked in time to allow more efficient processing.

Next, Factor will check for a file describing the DDE calibrators. If not found, Factor will select the DDE calibrators automatically and generate the facet regions (saved in a text file in the working directory called ``factor_directions.txt``). At this point, if ``interactive = True`` is set in the parset, Factor will pause to allow a check on the facets.

Factor will then begin self calibration and imaging (described in detail in :ref:`operations`) of the first facet or group of facets. For the facet or facets that pass self-calibration verification, Factor subtracts the improved model using the direction-dependent instrument tables. Processing then proceeds to the self calibration and imaging of the next facet or facet group, and the step are looped until all facets have been processed.

After self calibration is finished, imaging is done for any facets that did not successfully go through self calibration. These facets receive the direction-dependent instrument tables of the nearest facet for which self calibration succeeded. Lastly, all facet images are mosaicked together and the primary beam attenuation is corrected to produce the final image of the entire field.


Processing
----------

Factor uses the LOFAR pipeline framework to handle the actual processing. The LOFAR pipeline framework handles the distribution of jobs and keeps track of the state of a reduction. Each Factor operation is done in a separate pipeline. See :ref:`structure` for an overview of the various operations that Factor performs and their relation to one another, and see :ref:`operations` for details of each operation.


Output
------

Factor produces the following output inside the working directory:

``factor.log``
    Log file containing only the higher-level log messages. Detailed logs for each operation are available in the ``logs`` directory (see below).

``factor_directions.txt``
    Optional file listing the DDE calibrators. This file is generated only when no directions file is supplied by the user.

``chunks``
    Directory containing the time-chunked datasets that Factor uses for processing.

``logs``
    Directory containing the detailed operation logs.

    .. note::

        The log of each operation is stored as ``logs/operation_name/direction_name.out.log``. For example, the log of the ``facetselfcal`` operation for a direction named ``facet_patch_200`` will be stored in ``logs/facetselfcal/facet_patch_200.out.log``.

    .. note::

        Some error messages are stored in the ``logs/operation_name/direction_name.err.log`` file, but these are rarely of interest. Generally, important error messages will appear in the ``logs/operation_name/direction_name.out.log`` file. These log files are very large, so a search for "error" is usually the easiest way to find any error messages.

``regions``
    Directory containing the ds9 region files for the facet and self-calibration images. The following region files are made:

    * ``calimages_ds9.reg`` - the self-calibration image regions. The inner box shows the area over which sources are added back and cleaned. The outer box shows the area that is imaged.
    * ``facets_ds9.reg`` - the facet image regions.

``results``
    Directory containing the results (images, etc.) of each operation. See :ref:`operations` for details of the primary output products of each operation.

    .. note::

        The output of each operation is stored in a directory named ``results/operation_name/direction_name/``. For example, the results of the ``facetselfcal`` operation for a direction named ``facet_patch_200`` will be stored in ``results/facetselfcal/facet_patch_200/``.

``state``
    Directory containing files that save the state of a reduction.
