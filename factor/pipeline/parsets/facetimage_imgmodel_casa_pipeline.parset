{% extends "facetimage_imgmodel_pipeline.parset" %}

{% block model_data_steps %}concat_unaveraged, create_compressed_unaveraged, casa_ft4 {% endblock model_data_steps %}

{% block full_image_steps %}virtual_concat_averaged, casa_image_full1, adjust_casa_mapfile, mask, casa_image_full2, adjust_casa_mapfile2{% endblock full_image_steps %}

{% block model_data_parms %}
## virtual concat of the re-grouped unaveraged data, length = some
concat_unaveraged.control.type                    =   virtual_concat
concat_unaveraged.control.mapfile_in              =   regroup_shift_empty_map.output.mapfile
concat_unaveraged.control.inputkey                =   msfiles
concat_unaveraged.control.outputkey               =   msconcat
concat_unaveraged.argument.flags                  =   [msfiles,msconcat]

# create a compressed mapfile with the virtual concated files, length = 1 
# needed because the following casa-step can run only once.
create_compressed_unaveraged.control.kind         =   plugin
create_compressed_unaveraged.control.type         =   compressMapfile
create_compressed_unaveraged.control.mapfile_in   =   concat_unaveraged.output.mapfile
create_compressed_unaveraged.control.mapfile_dir  =   input.output.mapfile_dir
create_compressed_unaveraged.control.filename     =   concat_unaveraged_compressed.datamap

# make model visibilities on the unaveraged data, length = 1
# can run only once, because (may) create files in the directory of input data
casa_ft4.control.type                             =   casa
casa_ft4.control.mapfiles_in                      =   [create_compressed_unaveraged.output.mapfile,{{ facet_model_mapfile }}]
casa_ft4.control.inputkeys                        =   [inputms,modelimg]
casa_ft4.control.arguments                        =   [--nologger,--nogui,-c,{{ script_dir }}/do_ft_multi.py,modelimg,{{ nterms }},{{ facet_wplanes }},{{ script_dir }}/ftw.xml,{{ script_dir }}/task_ftw.py,inputms]
{% endblock model_data_parms %}

{% block full_image_parms %}
virtual_concat_averaged.control.type              =   virtual_concat
virtual_concat_averaged.control.mapfile_in        =   concat_averaged_compressed_map.output.mapfile
virtual_concat_averaged.control.inputkey          =   msfiles
virtual_concat_averaged.control.outputkey         =   msconcat
virtual_concat_averaged.argument.flags            =   [msfiles,msconcat]

# image the virtual concatenated data, length = 1
casa_image_full1.control.type                     =   casa_clean
casa_image_full1.control.mapfiles_in              =   [virtual_concat_averaged.output.mapfile,{{ facet_premask_mapfile }}]
casa_image_full1.control.inputkeys                =   [clean.vis,clean.mask]
casa_image_full1.control.outputkey                =   clean.imagename
casa_image_full1.control.arguments                =   [--nologger,--nogui,-c]
casa_image_full1.argument.clean.wprojplanes       =   {{ facet_wplanes }}
casa_image_full1.argument.clean.uvrange           =   '>80lambda'
casa_image_full1.argument.clean.nterms            =   {{ nterms }}
casa_image_full1.argument.clean.niter             =   15000
casa_image_full1.argument.clean.threshold         =   '0mJy'
casa_image_full1.argument.clean.imsize            =   [{{ facet_imsize }}, {{ facet_imsize }}]
casa_image_full1.argument.clean.cell              =   ['1.5arcsec', '1.5arcsec']
casa_image_full1.argument.clean.robust            =   -0.25
casa_image_full1.argument.clean.selectdata        =   True
casa_image_full1.argument.clean.gridmode          =   'widefield'
casa_image_full1.argument.clean.interactive       =   False
casa_image_full1.argument.clean.mode              =   'mfs'
casa_image_full1.argument.clean.gain              =   0.1
casa_image_full1.argument.clean.psfmode           =   'clark'
casa_image_full1.argument.clean.imagermode        =   'csclean'
casa_image_full1.argument.clean.ftmachine         =   'mosaic'
casa_image_full1.argument.clean.mosweight         =   False
casa_image_full1.argument.clean.scaletype         =   'SAULT'
casa_image_full1.argument.clean.weighting         =   'briggs'
casa_image_full1.argument.clean.uvtaper           =   False
casa_image_full1.argument.clean.pbcor             =   False
casa_image_full1.argument.clean.minpb             =   0.2
casa_image_full1.argument.clean.npixels           =   0
casa_image_full1.argument.clean.npercycle         =   100
casa_image_full1.argument.clean.cyclefactor       =   2.5
casa_image_full1.argument.clean.cyclespeedup      =   -1
casa_image_full1.argument.clean.chaniter          =   False
casa_image_full1.argument.clean.flatnoise         =   True
casa_image_full1.argument.clean.allowchunk        =   False

# fiddle with the casa mapfiles, length = 1
adjust_casa_mapfile.control.kind                  =   plugin
adjust_casa_mapfile.control.type                  =   appendMapfile
adjust_casa_mapfile.control.mapfile_in            =   casa_image_full1.output.casa_image_full1.image.mapfile
adjust_casa_mapfile.control.append                =   {{ casa_suffix }}
adjust_casa_mapfile.control.mapfile_dir           =   input.output.mapfile_dir
adjust_casa_mapfile.control.filename              =   mask_input.mapfile

# generate a clean-mask from first image, length = 1
mask.control.type                                 =   make_clean_mask
mask.control.mapfile_in                           =   adjust_casa_mapfile.output.mapfile
mask.control.inputkey                             =   imagefile
mask.control.outputkey                            =   maskfile
mask.argument.flags                               =   [imagefile,maskfile]
mask.argument.threshisl                           =   3
mask.argument.threshpix                           =   5
mask.argument.rmsbox                              =   (300,100)
mask.argument.rmsbox_bright                       =   (70,10)
mask.argument.atrous_jmax                         =   3
mask.argument.adaptive_rmsbox                     =   True
mask.argument.atrous_do                           =   True
mask.argument.img_format                          =   casa
mask.argument.vertices_file                       =   {{ vertices_file }}
mask.argument.threshold_format                    =   str_with_units

# image the virtual concatenated data with the updated mask, length = 1
casa_image_full2.control.type                     =   casa_clean
casa_image_full2.control.mapfiles_in              =   [virtual_concat_averaged.output.mapfile,mask.output.mapfile,mask.output.threshold_5sig.mapfile]
casa_image_full2.control.inputkeys                =   [clean.vis,clean.mask,clean.threshold]
casa_image_full2.control.outputkey                =   clean.imagename
casa_image_full2.control.arguments                =   [--nologger,--nogui,-c]
casa_image_full2.argument.clean.wprojplanes       =   {{ facet_wplanes }}
casa_image_full2.argument.clean.uvrange           =   '>80lambda'
casa_image_full2.argument.clean.nterms            =   {{ nterms }}
casa_image_full2.argument.clean.niter             =   1000000
casa_image_full2.argument.clean.imsize            =   [{{ facet_imsize }}, {{ facet_imsize }}]
casa_image_full2.argument.clean.cell              =   ['1.5arcsec', '1.5arcsec']
casa_image_full2.argument.clean.robust            =   -0.25
casa_image_full2.argument.clean.selectdata        =   True
casa_image_full2.argument.clean.gridmode          =   'widefield'
casa_image_full2.argument.clean.interactive       =   False
casa_image_full2.argument.clean.mode              =   'mfs'
casa_image_full2.argument.clean.gain              =   0.1
casa_image_full2.argument.clean.psfmode           =   'clark'
casa_image_full2.argument.clean.imagermode        =   'csclean'
casa_image_full2.argument.clean.ftmachine         =   'mosaic'
casa_image_full2.argument.clean.mosweight         =   False
casa_image_full2.argument.clean.scaletype         =   'SAULT'
casa_image_full2.argument.clean.weighting         =   'briggs'
casa_image_full2.argument.clean.uvtaper           =   False
casa_image_full2.argument.clean.pbcor             =   False
casa_image_full2.argument.clean.minpb             =   0.2
casa_image_full2.argument.clean.npixels           =   0
casa_image_full2.argument.clean.npercycle         =   100
casa_image_full2.argument.clean.cyclefactor       =   2.5
casa_image_full2.argument.clean.cyclespeedup      =   -1
casa_image_full2.argument.clean.chaniter          =   False
casa_image_full2.argument.clean.flatnoise         =   True
casa_image_full2.argument.clean.allowchunk        =   False

# create a mapfile with the final image and a known name, length = 1
adjust_casa_mapfile2.control.kind                 =   plugin
adjust_casa_mapfile2.control.type                 =   appendMapfile
adjust_casa_mapfile2.control.mapfile_in           =   casa_image_full2.output.casa_image_full2.image.mapfile
adjust_casa_mapfile2.control.append               =   {{ casa_suffix }}
adjust_casa_mapfile2.control.mapfile_dir          =   input.output.mapfile_dir
adjust_casa_mapfile2.control.filename             =   final_image.mapfile
{% endblock full_image_parms %}
