pipeline.steps = [update_mapfile_hosts, create_ms_map, create_parmdb_map, create_msmulti_map, create_high_sizes_map, create_low_sizes_map, wsclean_high1, mask_high, wsclean_high2, fits_to_image_high, casa_to_bbs_high, make_sourcedb_high, expand_sourcedb_high, predict_high, corrupt_high, subtract_high, correct_high, average, regroup_map, wsclean_low1, mask_low, wsclean_low2, fits_to_image_low, casa_to_bbs_low, make_sourcedb_low, expand_sourcedb_low, predict_low, corrupt_low, subtract_low, merge]

pipeline.pluginpath                        =   {{ pipeline_dir }}/plugins

# update the hosts entry in all mapfiles in "input.output.mapfile_dir"
update_mapfile_hosts.control.kind          =   plugin
update_mapfile_hosts.control.type          =   updateHosts
update_mapfile_hosts.control.mapfile_dir   =   input.output.mapfile_dir
update_mapfile_hosts.control.hosts         =   {{ hosts }}

# create a mapfile with all single MSs, length = nfiles
create_ms_map.control.kind                 =   plugin
create_ms_map.control.type                 =   addListMapfile
create_ms_map.control.hosts                =   {{ hosts }}
create_ms_map.control.files                =   {{ input_files_single }}
create_ms_map.control.mapfile_dir          =   {{ mapfile_dir }}
create_ms_map.control.filename             =   input_files_single.datamap

# create a mapfile with the direction independent parmDBs, length = nfiles
create_parmdb_map.control.kind             =   plugin
create_parmdb_map.control.type             =   addListMapfile
create_parmdb_map.control.hosts            =   {{ hosts }}
create_parmdb_map.control.files            =   {{ dir_indep_parmDBs }}
create_parmdb_map.control.mapfile_dir      =   {{ mapfile_dir }}
create_parmdb_map.control.filename         =   dir_indep_instrument_parmdbs.datamap

# create a multi-mapfile with the groups of MSs, length = nbands
create_msmulti_map.control.kind            =   plugin
create_msmulti_map.control.type            =   addListMultiMapfile
create_msmulti_map.control.hosts           =   {{ hosts }}
create_msmulti_map.control.files           =   {{ input_files_grouped }}
create_msmulti_map.control.mapfile_dir     =   {{ mapfile_dir }}
create_msmulti_map.control.filename        =   input_files_grouped.datamap

# create a mapfile with the image sizes for the high-res images, length = nbands
create_high_sizes_map.control.kind         =   plugin
create_high_sizes_map.control.type         =   addListMapfile
create_high_sizes_map.control.hosts        =   {{ hosts }}
create_high_sizes_map.control.files        =   {{ highres_image_sizes }}
create_high_sizes_map.control.mapfile_dir  =   {{ mapfile_dir }}
create_high_sizes_map.control.filename     =   highres_image_sizes.datamap

# create a mapfile with the image sizes for the low-res images, length = nbands
create_low_sizes_map.control.kind          =   plugin
create_low_sizes_map.control.type          =   addListMapfile
create_low_sizes_map.control.hosts         =   {{ hosts }}
create_low_sizes_map.control.files         =   {{ lowres_image_sizes }}
create_low_sizes_map.control.mapfile_dir   =   {{ mapfile_dir }}
create_low_sizes_map.control.filename      =   lowres_image_sizes.datamap

# first high-res imaging, length = nbands
wsclean_high1.control.type                 =   wsclean
wsclean_high1.control.mapfiles_in          =   [create_msmulti_map.output.mapfile,create_high_sizes_map.output.mapfile]
wsclean_high1.control.inputkeys            =   [msfile,imsize]
wsclean_high1.argument.flags               =   [-no-update-model-required,msfile]
wsclean_high1.argument.size                =   imsize
wsclean_high1.argument.niter               =   40000
wsclean_high1.argument.threshold           =   0.0
wsclean_high1.argument.pol                 =   I
wsclean_high1.argument.weight              =   briggs 0.0
wsclean_high1.argument.mgain               =   0.65
wsclean_high1.argument.minuv-l             =   80
wsclean_high1.argument.maxuv-l             =   {{ maxlambda_highres }}
wsclean_high1.argument.scale               =   {{ cellsize_highres_deg }}
wsclean_high1.argument.mem                 =   {{ max_percent_memory }}
wsclean_high1.argument.j                   =   {{ max_cpus_per_img }}
wsclean_high1.argument.tempdir             =   {{ local_dir }}

# make masks for the high-res images, length = nbands
mask_high.control.type                     =   make_clean_mask
mask_high.control.mapfile_in               =   wsclean_high1.output.wsclean_high1-image.fits.mapfile
mask_high.control.inputkey                 =   imagefile
mask_high.control.outputkey                =   maskfile
mask_high.argument.flags                   =   [imagefile,maskfile]
mask_high.argument.threshisl               =   3.0
mask_high.argument.threshpix               =   5.0
mask_high.argument.atrous_do               =   True
mask_high.argument.rmsbox                  =   (60,20)
mask_high.argument.adaptive_rmsbox         =   True
mask_high.argument.img_format              =   fits
mask_high.argument.atrous_jmax             =   3

# second high-res imaging, length = nbands
wsclean_high2.control.type                 =   wsclean
wsclean_high2.control.mapfiles_in          =   [create_msmulti_map.output.mapfile,mask_high.output.mapfile,create_high_sizes_map.output.mapfile]
wsclean_high2.control.inputkeys            =   [msfile,fitsmask,imsize]
wsclean_high2.argument.flags               =   [-update-model-required,msfile]
wsclean_high2.argument.fitsmask            =   fitsmask
wsclean_high2.argument.size                =   imsize
wsclean_high2.argument.niter               =   40000
wsclean_high2.argument.threshold           =   mask_high.output.threshold_5sig.mapfile
wsclean_high2.argument.pol                 =   I
wsclean_high2.argument.weight              =   briggs 0.0
wsclean_high2.argument.mgain               =   0.65
wsclean_high2.argument.minuv-l             =   80
wsclean_high2.argument.maxuv-l             =   {{ maxlambda_highres }}
wsclean_high2.argument.scale               =   {{ cellsize_highres_deg }} 
wsclean_high2.argument.mem                 =   {{ max_percent_memory }}
wsclean_high2.argument.j                   =   {{ max_cpus_per_img }}
wsclean_high2.argument.tempdir             =   {{ local_dir }}

# convert high-res images to casa images, length = nbands
fits_to_image_high.control.type            =   convert_fits_image_to_casa
fits_to_image_high.control.mapfile_in      =   wsclean_high2.output.wsclean_high2-model.fits.mapfile
fits_to_image_high.control.inputkey        =   fitsfile
fits_to_image_high.control.outputkey       =   imagefile
fits_to_image_high.argument.flags          =   [fitsfile,imagefile]
fits_to_image_high.argument.force_stokes_i =   True

# convert high-res casa images to skymodel files, length = nbands
casa_to_bbs_high.control.type              =   casapy2bbs
casa_to_bbs_high.control.mapfile_in        =   fits_to_image_high.output.mapfile
casa_to_bbs_high.control.inputkey          =   inputmodel
casa_to_bbs_high.control.outputkey         =   outfile
casa_to_bbs_high.control.arguments         =   [-n,inputmodel,outfile]

# make sourcedbs from the high-res skymodels, length = nbands
make_sourcedb_high.control.type              =   make_sourcedb
make_sourcedb_high.control.opts.mapfile_in   =   casa_to_bbs_high.output.mapfile
make_sourcedb_high.control.opts.inputkey     =   in
make_sourcedb_high.argument.format           =   <

# expand the sourcedb mapfile so that there is one entry for every file, length = nfiles
expand_sourcedb_high.control.kind             =   plugin
expand_sourcedb_high.control.type             =   mapfileSingleToGroup
expand_sourcedb_high.control.mapfile_in       =   make_sourcedb_high.output.mapfile
expand_sourcedb_high.control.mapfile_groups   =   create_msmulti_map.output.mapfile
expand_sourcedb_high.control.mapfile_dir      =   {{ mapfile_dir }}
expand_sourcedb_high.control.filename         =   expand_sourcedb_high.datamap

# predict the high-res model, length = nfiles
predict_high.control.type                    =   dppp
predict_high.control.opts.mapfiles_in        =   [create_ms_map.output.mapfile,expand_sourcedb_high.output.mapfile]
predict_high.control.opts.inputkeys          =   [msin,sourcedb]
predict_high.argument.msout.overwrite        =   True
predict_high.argument.msout.writefullresflag =   False
predict_high.argument.local_scratch_dir      =   {{ local_dir }}
predict_high.argument.steps                  =   [predict_high]
predict_high.argument.predict_high.type      =   predict
predict_high.argument.predict_high.sourcedb  =   sourcedb

# corrupt predicted high-res data, length = nfiles
corrupt_high.control.type                    =   dppp
corrupt_high.control.opts.mapfiles_in        =   [predict_high.output.mapfile,create_parmdb_map.output.mapfile]
corrupt_high.control.opts.inputkeys          =   [msin,parmdb]
corrupt_high.argument.msin.datacolumn        =   DATA
corrupt_high.argument.msout.overwrite        =   True
corrupt_high.argument.msout.writefullresflag =   False
corrupt_high.argument.local_scratch_dir      =   {{ local_dir }}
corrupt_high.argument.steps                  =   [corrupt]
corrupt_high.argument.corrupt.type           =   applycal
corrupt_high.argument.corrupt.parmdb         =   parmdb
corrupt_high.argument.corrupt.invert         =   False

# subtract the predicted and corrupted data, length = nfiles
subtract_high.control.type                   =   add_subtract_columns
subtract_high.control.opts.mapfiles_in       =   [create_ms_map.output.mapfile,corrupt_high.output.mapfile]
subtract_high.control.opts.inputkeys         =   [file1,file2]
subtract_high.argument.flags                 =   [file1,file2,DATA,DATA,SUBTRACTED_DATA,subtract]

# correct the new subtracted data, length = nfiles
correct_high.control.type                    =   dppp
correct_high.control.opts.mapfiles_in        =   [create_ms_map.output.mapfile,create_parmdb_map.output.mapfile]
correct_high.control.opts.inputkeys          =   [msin,parmdb]
correct_high.argument.msin.datacolumn        =   SUBTRACTED_DATA
correct_high.argument.msout.overwrite        =   True
correct_high.argument.msout.writefullresflag =   False
correct_high.argument.local_scratch_dir      =   {{ local_dir }}
correct_high.argument.steps                  =   [correct]
correct_high.argument.correct.type           =   applycal
correct_high.argument.correct.parmdb         =   parmdb
correct_high.argument.correct.invert         =   True

# average the subtracted and corrected data for low-res imaging, length = nfiles
average.control.type                       =   dppp
average.control.mapfile_in                 =   correct_high.output.mapfile
average.control.inputkey                   =   msin
average.argument.msin.datacolumn           =   DATA
average.argument.msout.overwrite           =   True
average.argument.msout.writefullresflag    =   False
average.argument.local_scratch_dir         =   {{ local_dir }}
average.argument.steps                     =   [avg]
average.argument.avg.type                  =   squash
average.argument.avg.freqstep              =   {{ initsubtract_freqstep }}
average.argument.avg.timestep              =   {{ initsubtract_timestep }}

# re-group mapfile to have one group per band, length = nbands
regroup_map.control.kind                   =   plugin
regroup_map.control.type                   =   reGroupMapfile
regroup_map.control.mapfile_in             =   average.output.mapfile
regroup_map.control.mapfile_groups         =   create_msmulti_map.output.mapfile
regroup_map.control.mapfile_dir            =   {{ mapfile_dir }}
regroup_map.control.filename               =   re_grouped.datamap

# first low-res imaging, length = nbands
wsclean_low1.control.type                  =   wsclean
wsclean_low1.control.mapfiles_in           =   [regroup_map.output.mapfile,create_low_sizes_map.output.mapfile]
wsclean_low1.control.inputkeys             =   [msfile,imsize]
wsclean_low1.argument.flags                =   [-no-update-model-required,msfile]
wsclean_low1.argument.size                 =   imsize
wsclean_low1.argument.niter                =   20000
wsclean_low1.argument.threshold            =   0.0
wsclean_low1.argument.pol                  =   I
wsclean_low1.argument.weight               =   briggs 0.0
wsclean_low1.argument.mgain                =   0.65
wsclean_low1.argument.minuv-l              =   80
wsclean_low1.argument.maxuv-l              =   {{ maxlambda_lowres }}
wsclean_low1.argument.scale                =   {{ cellsize_lowres_deg }}
wsclean_low1.argument.mem                  =   {{ max_percent_memory }}
wsclean_low1.argument.j                    =   {{ max_cpus_per_img }}
wsclean_low1.argument.tempdir              =   {{ local_dir }}

# make masks for the low-res images, length = nbands
mask_low.control.type                      =   make_clean_mask
mask_low.control.mapfile_in                =   wsclean_low1.output.wsclean_low1-image.fits.mapfile
mask_low.control.inputkey                  =   imagefile
mask_low.control.outputkey                 =   maskfile
mask_low.argument.flags                    =   [imagefile,maskfile]
mask_low.argument.threshisl                =   4
mask_low.argument.threshpix                =   5
mask_low.argument.rmsbox                   =   (60,20)
mask_low.argument.adaptive_rmsbox          =   True
mask_low.argument.img_format               =   fits
mask_low.argument.atrous_jmax              =   3

# second low-res imaging, length = nbands
wsclean_low2.control.type                  =   wsclean
wsclean_low2.control.mapfiles_in           =   [regroup_map.output.mapfile,mask_low.output.mapfile,create_low_sizes_map.output.mapfile]
wsclean_low2.control.inputkeys             =   [msfile,fitsmask,imsize]
wsclean_low2.argument.flags                =   [-no-update-model-required,msfile]
wsclean_low2.argument.fitsmask             =   fitsmask
wsclean_low2.argument.size                 =   imsize
wsclean_low2.argument.niter                =   20000
wsclean_low2.argument.threshold            =   mask_low.output.threshold_5sig.mapfile
wsclean_low2.argument.pol                  =   I
wsclean_low2.argument.weight               =   briggs 0.0
wsclean_low2.argument.mgain                =   0.65
wsclean_low2.argument.minuv-l              =   80
wsclean_low2.argument.maxuv-l              =   {{ maxlambda_lowres }}
wsclean_low2.argument.scale                =   {{ cellsize_lowres_deg }} 
wsclean_low2.argument.mem                  =   {{ max_percent_memory }}
wsclean_low2.argument.j                    =   {{ max_cpus_per_img }}
wsclean_low2.argument.tempdir              =   {{ local_dir }}

# convert low-res images to casa images, length = nbands
fits_to_image_low.control.type             =   convert_fits_image_to_casa
fits_to_image_low.control.mapfile_in       =   wsclean_low2.output.wsclean_low2-model.fits.mapfile
fits_to_image_low.control.inputkey         =   fitsfile
fits_to_image_low.control.outputkey        =   imagefile
fits_to_image_low.argument.flags           =   [fitsfile,imagefile]
fits_to_image_low.argument.force_stokes_i  =   True

# convert low-res casa images to skymodel files, length = nbands
casa_to_bbs_low.control.type               =   casapy2bbs
casa_to_bbs_low.control.mapfile_in         =   fits_to_image_low.output.mapfile
casa_to_bbs_low.control.inputkey           =   inputmodel
casa_to_bbs_low.control.outputkey          =   outfile
casa_to_bbs_low.control.arguments          =   [-n,inputmodel,outfile]

# make sourcedbs from the low-res skymodels, length = nbands
make_sourcedb_low.control.type               =   make_sourcedb
make_sourcedb_low.control.opts.mapfile_in    =   casa_to_bbs_low.output.mapfile
make_sourcedb_low.control.opts.inputkey      =   in
make_sourcedb_low.argument.format            =   <

# expand the sourcedb mapfile so that there is one entry for every file, length = nfiles
expand_sourcedb_low.control.kind             =   plugin
expand_sourcedb_low.control.type             =   mapfileSingleToGroup
expand_sourcedb_low.control.mapfile_in       =   make_sourcedb_low.output.mapfile
expand_sourcedb_low.control.mapfile_groups   =   create_msmulti_map.output.mapfile
expand_sourcedb_low.control.mapfile_dir      =   {{ mapfile_dir }}
expand_sourcedb_low.control.filename         =   expand_sourcedb_low.datamap

# predict the low-res model, length = nfiles
predict_low.control.type                     =   dppp
predict_low.control.opts.mapfiles_in         =   [create_ms_map.output.mapfile,expand_sourcedb_low.output.mapfile]
predict_low.control.opts.inputkeys           =   [msin,sourcedb]
predict_low.argument.msout.overwrite         =   True
predict_low.argument.msout.writefullresflag  =   False
predict_low.argument.local_scratch_dir       =   {{ local_dir }}
predict_low.argument.steps                   =   [predict_low]
predict_low.argument.predict_low.type        =   predict
predict_low.argument.predict_low.sourcedb    =   sourcedb

# corrupt predicted low-res data, length = nfiles
corrupt_low.control.type                     =   dppp
corrupt_low.control.opts.mapfiles_in         =   [predict_low.output.mapfile,create_parmdb_map.output.mapfile]
corrupt_low.control.opts.inputkeys           =   [msin,parmdb]
corrupt_low.argument.msin.datacolumn         =   DATA
corrupt_low.argument.msout.overwrite         =   True
corrupt_low.argument.msout.writefullresflag  =   False
corrupt_low.argument.local_scratch_dir       =   {{ local_dir }}
corrupt_low.argument.steps                   =   [corrupt]
corrupt_low.argument.corrupt.type            =   applycal
corrupt_low.argument.corrupt.parmdb          =   parmdb
corrupt_low.argument.corrupt.invert          =   False

# subtract the predicted and corrupted data, length = nfiles
subtract_low.control.type                    =   add_subtract_columns
subtract_low.control.opts.mapfiles_in        =   [create_ms_map.output.mapfile,corrupt_low.output.mapfile]
subtract_low.control.opts.inputkeys          =   [file1,file2]
subtract_low.argument.flags                  =   [file1,file2,SUBTRACTED_DATA,DATA,SUBTRACTED_DATA_ALL,subtract]

# merge the high-res and low-res skymodels, length = nbands
merge.control.type                         =   merge_skymodels
merge.control.mapfiles_in                  =   [casa_to_bbs_low.output.mapfile,casa_to_bbs_high.output.mapfile]
merge.control.inputkeys                    =   [modellow,modelhigh]
merge.control.outputkey                    =   modelmerged
merge.argument.flags                       =   [modellow,modelhigh,modelmerged]
