{% extends "facetimage_skymodel_pipeline.parset" %}
{% block full_image_steps %}virtual_concat, premask, casa_image_full1, adjust_casa_mapfile, mask, casa_image_full2, adjust_casa_mapfile2{% endblock full_image_steps %}
{% block ft_steps %}create_model4_map, regroup_add_all_map, concat_unaveraged, create_compressed_mapfile6, casa_ft{% endblock ft_steps %}
{% block full_image_parms %}

# make a virtual concatenated map, length = 1
virtual_concat.control.type                       =   virtual_concat
{% if average_image_data %}
virtual_concat.control.mapfile_in                 =   concat_reaveraged_compressed_map.output.mapfile
{% else %}
virtual_concat.control.mapfile_in                 =   {{ image_data_mapfile }}
{% endif %}
virtual_concat.control.inputkey                   =   msfiles
virtual_concat.control.outputkey                  =   msconcat
virtual_concat.argument.flags                     =   [msfiles,msconcat]

# Make a preliminary clean mask from the facet region, length = 1
premask.control.type                              =   make_clean_mask
premask.control.mapfile_in                        =   {{ image_data_mapfile }}
premask.control.inputkey                          =   imagefile
premask.control.outputkey                         =   maskfile
premask.argument.flags                            =   [imagefile,maskfile]
premask.argument.img_format                       =   casa
premask.argument.pad_to_size                      =   {{ facet_imsize }}
premask.argument.skip_source_detection            =   True
premask.argument.vertices_file                    =   {{ vertices_file }}
premask.argument.reference_ra_deg                 =   {{ facet_ra }}
premask.argument.reference_dec_deg                =   {{ facet_dec }}
premask.argument.cellsize_deg                     =   {{ cellsize_facet_deg }}
premask.argument.make_blank_image                 =   True

# image the virtual concatenated data, length = 1
casa_image_full1.control.type                     =   casa_clean
casa_image_full1.control.mapfiles_in              =   [virtual_concat.output.mapfile,premask.output.mapfile]
casa_image_full1.control.inputkeys                =   [clean.vis,clean.mask]
casa_image_full1.control.outputkey                =   clean.imagename
casa_image_full1.control.arguments                =   [--nologger,--nogui,-c]
casa_image_full1.argument.clean.wprojplanes       =   {{ facet_wplanes }}
casa_image_full1.argument.clean.uvrange           =   '>{{ facet_min_uv_lambda }}lambda'
casa_image_full1.argument.clean.nterms            =   {{ nterms }}
casa_image_full1.argument.clean.niter             =   {{ casa_full1_image_niter }}
casa_image_full1.argument.clean.threshold         =   '{{ casa_full_image_threshold_mjy }}'
casa_image_full1.argument.clean.imsize            =   [{{ facet_imsize }}, {{ facet_imsize }}]
casa_image_full1.argument.clean.cell              =   ['{{ cellsize_facet_deg * 3600.0 }}arcsec', '{{ cellsize_facet_deg * 3600.0 }}arcsec']
casa_image_full1.argument.clean.robust            =   {{ robust_facet }}
casa_image_full1.argument.clean.multiscale        =   {{ casa_full_multiscale }}
casa_image_full1.argument.clean.selectdata        =   True
casa_image_full1.argument.clean.gridmode          =   'widefield'
casa_image_full1.argument.clean.interactive       =   False
casa_image_full1.argument.clean.mode              =   'mfs'
casa_image_full1.argument.clean.gain              =   0.1
casa_image_full1.argument.clean.psfmode           =   'clark'
casa_image_full1.argument.clean.imagermode        =   'csclean'
casa_image_full1.argument.clean.ftmachine         =   'mosaic'
casa_image_full1.argument.clean.mosweight         =   False
casa_image_full1.argument.clean.scaletype         =   'SAULT'
casa_image_full1.argument.clean.weighting         =   'briggs'
casa_image_full1.argument.clean.pbcor             =   False
casa_image_full1.argument.clean.minpb             =   0.2
casa_image_full1.argument.clean.npixels           =   0
casa_image_full1.argument.clean.npercycle         =   100
casa_image_full1.argument.clean.cyclefactor       =   2.5
casa_image_full1.argument.clean.cyclespeedup      =   -1
casa_image_full1.argument.clean.chaniter          =   False
casa_image_full1.argument.clean.flatnoise         =   True
casa_image_full1.argument.clean.allowchunk        =   False
{% if taper_facet_arcsec > 0.0 %}
casa_image_full1.argument.clean.uvtaper           =   True
casa_image_full1.argument.clean.outertaper        =   ['{{ taper_facet_arcsec }}arcsec']
{% else %}
casa_image_full1.argument.clean.uvtaper           =   False
{% endif %}

# fiddle with the casa mapfiles, length = 1
adjust_casa_mapfile.control.kind                  =   plugin
adjust_casa_mapfile.control.type                  =   appendMapfile
adjust_casa_mapfile.control.mapfile_in            =   casa_image_full1.output.casa_image_full1.image.mapfile
adjust_casa_mapfile.control.append                =   {{ casa_suffix }}
adjust_casa_mapfile.control.mapfile_dir           =   input.output.mapfile_dir
adjust_casa_mapfile.control.filename              =   image1.mapfile

# generate a clean-mask from first image, length = 1
mask.control.type                                 =   make_clean_mask
mask.control.mapfile_in                           =   adjust_casa_mapfile.output.mapfile
mask.control.inputkey                             =   imagefile
mask.control.outputkey                            =   maskfile
mask.argument.flags                               =   [imagefile,maskfile]
mask.argument.region_file                         =   {{ region_field }}
mask.argument.threshisl                           =   3
mask.argument.threshpix                           =   5
mask.argument.rmsbox                              =   (300,100)
mask.argument.rmsbox_bright                       =   (70,10)
mask.argument.atrous_jmax                         =   3
mask.argument.adaptive_rmsbox                     =   True
mask.argument.atrous_do                           =   True
mask.argument.img_format                          =   casa
mask.argument.vertices_file                       =   {{ vertices_file }}
mask.argument.threshold_format                    =   str_with_units

# image the virtual concatenated data with the updated mask, length = 1
casa_image_full2.control.type                     =   casa_clean
casa_image_full2.control.mapfiles_in              =   [virtual_concat.output.mapfile,mask.output.mapfile,mask.output.threshold_5sig.mapfile]
casa_image_full2.control.inputkeys                =   [clean.vis,clean.mask,clean.threshold]
casa_image_full2.control.outputkey                =   clean.imagename
casa_image_full2.control.arguments                =   [--nologger,--nogui,-c]
casa_image_full2.argument.clean.wprojplanes       =   {{ facet_wplanes }}
casa_image_full2.argument.clean.uvrange           =   '>{{ facet_min_uv_lambda }}lambda'
casa_image_full2.argument.clean.nterms            =   {{ nterms }}
casa_image_full2.argument.clean.niter             =   {{ casa_full2_image_niter }}
casa_image_full2.argument.clean.imsize            =   [{{ facet_imsize }}, {{ facet_imsize }}]
casa_image_full2.argument.clean.cell              =   ['{{ cellsize_facet_deg * 3600.0 }}arcsec', '{{ cellsize_facet_deg * 3600.0 }}arcsec']
casa_image_full2.argument.clean.robust            =   {{ robust_facet }}
casa_image_full2.argument.clean.multiscale        =   {{ casa_full_multiscale }}
casa_image_full2.argument.clean.selectdata        =   True
casa_image_full2.argument.clean.gridmode          =   'widefield'
casa_image_full2.argument.clean.interactive       =   False
casa_image_full2.argument.clean.mode              =   'mfs'
casa_image_full2.argument.clean.gain              =   0.1
casa_image_full2.argument.clean.psfmode           =   'clark'
casa_image_full2.argument.clean.imagermode        =   'csclean'
casa_image_full2.argument.clean.ftmachine         =   'mosaic'
casa_image_full2.argument.clean.mosweight         =   False
casa_image_full2.argument.clean.scaletype         =   'SAULT'
casa_image_full2.argument.clean.weighting         =   'briggs'
casa_image_full2.argument.clean.pbcor             =   False
casa_image_full2.argument.clean.minpb             =   0.2
casa_image_full2.argument.clean.npixels           =   0
casa_image_full2.argument.clean.npercycle         =   100
casa_image_full2.argument.clean.cyclefactor       =   3.0
casa_image_full2.argument.clean.cyclespeedup      =   -1
casa_image_full2.argument.clean.chaniter          =   False
casa_image_full2.argument.clean.flatnoise         =   True
casa_image_full2.argument.clean.allowchunk        =   False
{% if taper_facet_arcsec > 0.0 %}
casa_image_full2.argument.clean.uvtaper           =   True
casa_image_full2.argument.clean.outertaper        =   ['{{ taper_facet_arcsec }}arcsec']
{% else %}
casa_image_full2.argument.clean.uvtaper           =   False
{% endif %}

# create a mapfile with the final image and a known name, length = 1
adjust_casa_mapfile2.control.kind                 =   plugin
adjust_casa_mapfile2.control.type                 =   appendMapfile
adjust_casa_mapfile2.control.mapfile_in           =   casa_image_full2.output.casa_image_full2.image.mapfile
adjust_casa_mapfile2.control.append               =   {{ casa_suffix }}
adjust_casa_mapfile2.control.mapfile_dir          =   input.output.mapfile_dir
adjust_casa_mapfile2.control.filename             =   final_image.mapfile
{% endblock full_image_parms %}
