pipeline.steps = [average0, casa_image01, mask0, casa_image02, create_model0_map, casa_ft0, make_chunks, create_chunks_map, solve_phaseonly1, average1, create_compressed_mapfile1, concat1, casa_image11, mask1, casa_image12, create_model1_map, casa_ft1, solve_phaseonly2, average2, create_compressed_mapfile2, concat2, casa_image21, mask2, casa_image22, create_model2_map, casa_ft2, solve_ampphase11, solve_ampphase12]

pipeline.pluginpath                         =   {{ pipeline_dir }}/plugins

average0.control.type                       =   dppp
average0.control.opts.mapfile_in            =   {{ shifted_cal_concat_datamap }}
average0.control.opts.inputkey              =   msin
average0.argument.msin.datacolumn           =   CORRECTED_DATA
average0.argument.msout.writefullresflag    =   False
average0.argument.steps                     =   [avg]
average0.argument.avg.type                  =   squash
average0.argument.avg.freqstep              =   1
average0.argument.avg.timestep              =   12

casa_image01.control.kind                   =   recipe
casa_image01.control.type                   =   casa
casa_image01.control.opts.mapfile_in        =   average0.output.mapfile
casa_image01.control.opts.inputkey          =   clean.vis
casa_image01.control.opts.outputkey         =   clean.imagename
casa_image01.control.opts.arguments         =   [--nologger,-c]
casa_image01.argument.clean.gridmode        =   'widefield'
casa_image01.argument.clean.wprojplanes     =   {{ wplanes }}
casa_image01.argument.clean.selectdata      =   True
casa_image01.argument.clean.uvrange         =   '>80lambda'
casa_image01.argument.clean.mode            =   'mfs'
casa_image01.argument.clean.nterms          =   2
casa_image01.argument.clean.niter           =   1000
casa_image01.argument.clean.gain            =   0.01
casa_image01.argument.clean.threshold       =   '0mJy'
casa_image01.argument.clean.psfmode         =   'clark'
casa_image01.argument.clean.interactive     =   False
casa_image01.argument.clean.imsize          =   [{{ imsize }}, {{ imsize }}]
casa_image01.argument.clean.cell            =   ['1.5arcsec', '1.5arcsec']
casa_image01.argument.clean.weighting       =   'briggs'
casa_image01.argument.clean.robust          =   -0.25
casa_image01.argument.clean.uvtaper         =   False
casa_image01.argument.clean.pbcor           =   False
casa_image01.argument.clean.minpb           =   0.2
casa_image01.argument.clean.multiscale      =   [0, 3, 7, 25, 60, 150]

mask0.control.type                         =   make_clean_mask
mask0.control.mapfile_in                   =   casa_image01.output.casa_image01.image.tt0.mapfile
mask0.control.inputkey                     =   imagefile
mask0.control.outputkey                    =   maskfile
mask0.argument.flags                       =   [imagefile,maskfile]
mask0.argument.threshpix                   =   10
mask0.argument.threshisl                   =   6
mask0.argument.atrous_do                   =   True
mask0.argument.rmsbox                      =   (50,20)
mask0.argument.img_format                  =   casa
mask0.argument.threshold_format            =   str_with_units

casa_image02.control.kind                   =   recipe
casa_image02.control.type                   =   casa
casa_image02.control.opts.mapfiles_in       =   [average0.output.mapfile,mask0.output.mapfile,mask0.output.threshold_5sig.mapfile]
casa_image02.control.opts.inputkeys         =   [clean.vis,clean.mask,clean.threshold]
casa_image02.control.opts.outputkey         =   clean.imagename
casa_image02.control.opts.arguments         =   [--nologger,-c]
casa_image02.argument.clean.gridmode        =   'widefield'
casa_image02.argument.clean.wprojplanes     =   {{ wplanes }}
casa_image02.argument.clean.selectdata      =   True
casa_image02.argument.clean.uvrange         =   '>80lambda'
casa_image02.argument.clean.mode            =   'mfs'
casa_image02.argument.clean.nterms          =   2
casa_image02.argument.clean.niter           =   1000000
casa_image02.argument.clean.gain            =   0.01
casa_image02.argument.clean.psfmode         =   'clark'
casa_image02.argument.clean.interactive     =   False
casa_image02.argument.clean.imsize          =   [{{ imsize }}, {{ imsize }}]
casa_image02.argument.clean.cell            =   ['1.5arcsec', '1.5arcsec']
casa_image02.argument.clean.weighting       =   'briggs'
casa_image02.argument.clean.robust          =   -0.25
casa_image02.argument.clean.uvtaper         =   False
casa_image02.argument.clean.pbcor           =   False
casa_image02.argument.clean.minpb           =   0.2
casa_image02.argument.clean.multiscale      =   [0, 3, 7, 25, 60, 150]

create_model0_map.control.kind              =   plugin
create_model0_map.control.type              =   trimMapfile
create_model0_map.control.mapfile_in        =   casa_image02.output.casa_image02.model.tt0.mapfile
create_model0_map.control.trim              =   .model.tt0
create_model0_map.control.mapfile_dir       =   {{ mapfile_dir }}
create_model0_map.control.filename          =   model0_rootnames.datamap

casa_ft0.control.kind                       =   recipe
casa_ft0.control.type                       =   casa
casa_ft0.control.opts.mapfiles_in           =   [{{ shifted_cal_concat_datamap }},create_model0_map.output.mapfile]
casa_ft0.control.opts.inputkeys             =   [inputms,modelimg]
casa_ft0.control.opts.arguments             =   [--nologger,-c,{{ script_dir }}/ftw.py,inputms,modelimg,2,{{ wplanes }},{{ script_dir }}/ftw.xml,{{ script_dir }}/task_ftw.py]

make_chunks.control.type                    =   chunk_by_time
make_chunks.control.mapfile_in              =   {{ shifted_cal_concat_datamap }}
make_chunks.control.inputkey                =   msfile
make_chunks.argument.flags                  =   [msfile, {{ chunk_width }}]

create_chunks_map.control.kind              =   plugin
create_chunks_map.control.type              =   addListMapfile
create_chunks_map.control.hosts             =   {{ hosts }}
create_chunks_map.control.files             =   make_chunks.output.files.mapfile
create_chunks_map.control.mapfile_dir       =   {{ mapfile_dir }}
create_chunks_map.control.filename          =   chunks.mapfile

solve_phaseonly1.control.type                            =   calibrate-stand-alone
solve_phaseonly1.control.mapfile_in                      =   create_chunks_map.output.mapfile
solve_phaseonly1.control.inputkey                        =   inputms
solve_phaseonly1.control.arguments                       =   [--replace-sourcedb,inputms,{{ skymodel_dir }}/empty.skymodel]
solve_phaseonly1.control.args_format                     =   bbs
solve_phaseonly1.control.parset                          =   {{ parset_dir }}/facet_dirdep_phaseonly_solve.parset
solve_phaseonly1.control.parsetasfile                    =   True
solve_phaseonly1.argument.Step.solve.Solve.CellSize.Time =   {{ solint_p }}

average1.control.type                       =   dppp
average1.control.opts.mapfile_in            =   create_chunks_map.output.mapfile
average1.control.opts.inputkey              =   msin
average1.argument.msin.datacolumn           =   CORRECTED_DATA
average1.argument.msout.writefullresflag    =   False
average1.argument.steps                     =   [avg]
average1.argument.avg.type                  =   squash
average1.argument.avg.freqstep              =   1
average1.argument.avg.timestep              =   12

create_compressed_mapfile1.control.kind        =   plugin
create_compressed_mapfile1.control.type        =   compressMapfile
create_compressed_mapfile1.control.mapfile_in  =   average1.output.mapfile
create_compressed_mapfile1.control.mapfile_dir =   {{ mapfile_dir }}
create_compressed_mapfile1.control.filename    =   concat1_input.mapfile

concat1.control.type                 =   virtual_concat
concat1.control.mapfile_in           =   create_compressed_mapfile1.output.mapfile
concat1.control.inputkey             =   msfiles
concat1.control.outputkey            =   msconcat
concat1.argument.flags               =   [msfiles,msconcat]

casa_image11.control.kind                   =   recipe
casa_image11.control.type                   =   casa
casa_image11.control.opts.mapfile_in        =   concat1.output.mapfile
casa_image11.control.opts.inputkey          =   clean.vis
casa_image11.control.opts.outputkey         =   clean.imagename
casa_image11.control.opts.arguments         =   [--nologger,-c]
casa_image11.argument.clean.gridmode        =   'widefield'
casa_image11.argument.clean.wprojplanes     =   {{ wplanes }}
casa_image11.argument.clean.selectdata      =   True
casa_image11.argument.clean.uvrange         =   '>80lambda'
casa_image11.argument.clean.mode            =   'mfs'
casa_image11.argument.clean.nterms          =   2
casa_image11.argument.clean.niter           =   1000
casa_image11.argument.clean.gain            =   0.01
casa_image11.argument.clean.threshold       =   '0mJy'
casa_image11.argument.clean.psfmode         =   'clark'
casa_image11.argument.clean.interactive     =   False
casa_image11.argument.clean.imsize          =   [{{ imsize }}, {{ imsize }}]
casa_image11.argument.clean.cell            =   ['1.5arcsec', '1.5arcsec']
casa_image11.argument.clean.weighting       =   'briggs'
casa_image11.argument.clean.robust          =   -0.25
casa_image11.argument.clean.uvtaper         =   False
casa_image11.argument.clean.pbcor           =   False
casa_image11.argument.clean.minpb           =   0.2
casa_image11.argument.clean.multiscale      =   [0, 3, 7, 25, 60, 150]

mask1.control.type                         =   make_clean_mask
mask1.control.mapfile_in                   =   casa_image11.output.casa_image11.image.tt0.mapfile
mask1.control.inputkey                     =   imagefile
mask1.control.outputkey                    =   maskfile
mask1.argument.flags                       =   [imagefile,maskfile]
mask1.argument.threshpix                   =   10
mask1.argument.threshisl                   =   6
mask1.argument.atrous_do                   =   True
mask1.argument.rmsbox                      =   (50,20)
mask1.argument.img_format                  =   casa
mask1.argument.threshold_format            =   str_with_units

casa_image12.control.kind                   =   recipe
casa_image12.control.type                   =   casa
casa_image12.control.opts.mapfiles_in       =   [concat1.output.mapfile,mask1.output.mapfile,mask1.output.threshold_5sig.mapfile]
casa_image12.control.opts.inputkeys         =   [clean.vis,clean.mask,clean.threshold]
casa_image12.control.opts.outputkey         =   clean.imagename
casa_image12.control.opts.arguments         =   [--nologger,-c]
casa_image12.argument.clean.gridmode        =   'widefield'
casa_image12.argument.clean.wprojplanes     =   {{ wplanes }}
casa_image12.argument.clean.selectdata      =   True
casa_image12.argument.clean.uvrange         =   '>80lambda'
casa_image12.argument.clean.mode            =   'mfs'
casa_image12.argument.clean.nterms          =   2
casa_image12.argument.clean.niter           =   1000000
casa_image12.argument.clean.gain            =   0.01
casa_image12.argument.clean.psfmode         =   'clark'
casa_image12.argument.clean.interactive     =   False
casa_image12.argument.clean.imsize          =   [{{ imsize }}, {{ imsize }}]
casa_image12.argument.clean.cell            =   ['1.5arcsec', '1.5arcsec']
casa_image12.argument.clean.weighting       =   'briggs'
casa_image12.argument.clean.robust          =   -0.25
casa_image12.argument.clean.uvtaper         =   False
casa_image12.argument.clean.pbcor           =   False
casa_image12.argument.clean.minpb           =   0.2
casa_image12.argument.clean.multiscale      =   [0, 3, 7, 25, 60, 150]

create_model1_map.control.kind              =   plugin
create_model1_map.control.type              =   trimMapfile
create_model1_map.control.mapfile_in        =   casa_image12.output.casa_image12.model.tt0.mapfile
create_model1_map.control.trim              =   .model.tt0
create_model1_map.control.mapfile_dir       =   {{ mapfile_dir }}
create_model1_map.control.filename          =   model1_rootnames.datamap

casa_ft1.control.kind                       =   recipe
casa_ft1.control.type                       =   casa
casa_ft1.control.opts.mapfiles_in           =   [{{ shifted_cal_concat_datamap }},create_model1_map.output.mapfile]
casa_ft1.control.opts.inputkeys             =   [inputms,modelimg]
casa_ft1.control.opts.arguments             =   [--nologger,-c,{{ script_dir }}/ftw.py,inputms,modelimg,2,{{ wplanes }},{{ script_dir }}/ftw.xml,{{ script_dir }}/task_ftw.py]

solve_phaseonly2.control.type                            =   calibrate-stand-alone
solve_phaseonly2.control.mapfile_in                      =   create_chunks_map.output.mapfile
solve_phaseonly2.control.inputkey                        =   inputms
solve_phaseonly2.control.arguments                       =   [--replace-sourcedb,inputms,{{ skymodel_dir }}/empty.skymodel]
solve_phaseonly2.control.args_format                     =   bbs
solve_phaseonly2.control.parset                          =   {{ parset_dir }}/facet_dirdep_phaseonly_solve.parset
solve_phaseonly2.control.parsetasfile                    =   True
solve_phaseonly2.argument.Step.solve.Solve.CellSize.Time =   {{ solint_p }}

average2.control.type                       =   dppp
average2.control.opts.mapfile_in            =   create_chunks_map.output.mapfile
average2.control.opts.inputkey              =   msin
average2.argument.msin.datacolumn           =   CORRECTED_DATA
average2.argument.msout.writefullresflag    =   False
average2.argument.steps                     =   [avg]
average2.argument.avg.type                  =   squash
average2.argument.avg.freqstep              =   1
average2.argument.avg.timestep              =   12

create_compressed_mapfile2.control.kind        =   plugin
create_compressed_mapfile2.control.type        =   compressMapfile
create_compressed_mapfile2.control.mapfile_in  =   average2.output.mapfile
create_compressed_mapfile2.control.mapfile_dir =   {{ mapfile_dir }}
create_compressed_mapfile2.control.filename    =   concat2_input.mapfile

concat2.control.type                 =   virtual_concat
concat2.control.mapfile_in           =   create_compressed_mapfile2.output.mapfile
concat2.control.inputkey             =   msfiles
concat2.control.outputkey            =   msconcat
concat2.argument.flags               =   [msfiles,msconcat]

casa_image21.control.kind                   =   recipe
casa_image21.control.type                   =   casa
casa_image21.control.opts.mapfile_in        =   concat2.output.mapfile
casa_image21.control.opts.inputkey          =   clean.vis
casa_image21.control.opts.outputkey         =   clean.imagename
casa_image21.control.opts.arguments         =   [--nologger,-c]
casa_image21.argument.clean.gridmode        =   'widefield'
casa_image21.argument.clean.wprojplanes     =   {{ wplanes }}
casa_image21.argument.clean.selectdata      =   True
casa_image21.argument.clean.uvrange         =   '>80lambda'
casa_image21.argument.clean.mode            =   'mfs'
casa_image21.argument.clean.nterms          =   2
casa_image21.argument.clean.niter           =   1000
casa_image21.argument.clean.gain            =   0.01
casa_image21.argument.clean.threshold       =   '0mJy'
casa_image21.argument.clean.psfmode         =   'clark'
casa_image21.argument.clean.interactive     =   False
casa_image21.argument.clean.imsize          =   [{{ imsize }}, {{ imsize }}]
casa_image21.argument.clean.cell            =   ['1.5arcsec', '1.5arcsec']
casa_image21.argument.clean.weighting       =   'briggs'
casa_image21.argument.clean.robust          =   -0.25
casa_image21.argument.clean.uvtaper         =   False
casa_image21.argument.clean.pbcor           =   False
casa_image21.argument.clean.minpb           =   0.2
casa_image21.argument.clean.multiscale      =   [0, 3, 7, 25, 60, 150]

mask2.control.type                         =   make_clean_mask
mask2.control.mapfile_in                   =   casa_image21.output.casa_image21.image.tt0.mapfile
mask2.control.inputkey                     =   imagefile
mask2.control.outputkey                    =   maskfile
mask2.argument.flags                       =   [imagefile,maskfile]
mask2.argument.threshpix                   =   10
mask2.argument.threshisl                   =   6
mask2.argument.atrous_do                   =   True
mask2.argument.rmsbox                      =   (50,20)
mask2.argument.img_format                  =   casa
mask2.argument.threshold_format            =   str_with_units

casa_image22.control.kind                   =   recipe
casa_image22.control.type                   =   casa
casa_image22.control.opts.mapfiles_in       =   [concat2.output.mapfile,mask2.output.mapfile,mask2.output.threshold_5sig.mapfile]
casa_image22.control.opts.inputkeys         =   [clean.vis,clean.mask,clean.threshold]
casa_image22.control.opts.outputkey         =   clean.imagename
casa_image22.control.opts.arguments         =   [--nologger,-c]
casa_image22.argument.clean.gridmode        =   'widefield'
casa_image22.argument.clean.wprojplanes     =   {{ wplanes }}
casa_image22.argument.clean.selectdata      =   True
casa_image22.argument.clean.uvrange         =   '>80lambda'
casa_image22.argument.clean.mode            =   'mfs'
casa_image22.argument.clean.nterms          =   2
casa_image22.argument.clean.niter           =   1000000
casa_image22.argument.clean.gain            =   0.01
casa_image22.argument.clean.psfmode         =   'clark'
casa_image22.argument.clean.interactive     =   False
casa_image22.argument.clean.imsize          =   [{{ imsize }}, {{ imsize }}]
casa_image22.argument.clean.cell            =   ['1.5arcsec', '1.5arcsec']
casa_image22.argument.clean.weighting       =   'briggs'
casa_image22.argument.clean.robust          =   -0.25
casa_image22.argument.clean.uvtaper         =   False
casa_image22.argument.clean.pbcor           =   False
casa_image22.argument.clean.minpb           =   0.2
casa_image22.argument.clean.multiscale      =   [0, 3, 7, 25, 60, 150]

create_model2_map.control.kind              =   plugin
create_model2_map.control.type              =   trimMapfile
create_model2_map.control.mapfile_in        =   casa_image22.output.casa_image22.model.tt0.mapfile
create_model2_map.control.trim              =   .model.tt0
create_model2_map.control.mapfile_dir       =   {{ mapfile_dir }}
create_model2_map.control.filename          =   model1_rootnames.datamap

casa_ft2.control.kind                       =   recipe
casa_ft2.control.type                       =   casa
casa_ft2.control.opts.mapfiles_in           =   [{{ shifted_cal_concat_datamap }},create_model2_map.output.mapfile]
casa_ft2.control.opts.inputkeys             =   [inputms,modelimg]
casa_ft2.control.opts.arguments             =   [--nologger,-c,{{ script_dir }}/ftw.py,inputms,modelimg,2,{{ wplanes }},{{ script_dir }}/ftw.xml,{{ script_dir }}/task_ftw.py]

solve_ampphase11.control.kind                            =   recipe
solve_ampphase11.control.mapfile_in                      =   create_chunks_map.output.mapfile
solve_ampphase11.control.inputkey                        =   inputms
solve_ampphase11.control.arguments                       =   [--replace-sourcedb,inputms,{{ skymodel_dir }}/empty.skymodel]
solve_ampphase11.control.args_format                     =   bbs
solve_ampphase11.control.parset                          =   {{ parset_dir }}/facet_dirdep_phaseonly_solve.parset
solve_ampphase11.control.parsetasfile                    =   True
solve_ampphase11.argument.Step.solve.Solve.CellSize.Time =   {{ solint_p }}

solve_ampphase12.control.kind                            =   recipe
solve_ampphase12.control.mapfile_in                      =   create_chunks_map.output.mapfile
solve_ampphase12.control.inputkey                        =   inputms
solve_ampphase12.control.arguments                       =   [--replace-sourcedb,inputms,{{ skymodel_dir }}/empty.skymodel]
solve_ampphase12.control.args_format                     =   bbs
solve_ampphase12.control.parset                          =   {{ parset_dir }}/facet_dirdep_amponly_solve.parset
solve_ampphase12.control.parsetasfile                    =   True
solve_ampphase12.argument.Strategy.ChunkSize             =   {{ solint_a }}
solve_ampphase12.argument.Step.solve.Solve.CellSize.Time =   {{ solint_a }}


