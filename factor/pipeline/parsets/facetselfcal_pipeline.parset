pipeline.steps = [update_mapfile_hosts, create_ms_map, create_parmdb_map, create_full_skymodels_map, make_facet_skymodels_all, copy_facet_skymodels_all_map, make_facet_skymodels_cal, select_single_cliplevel_cal, shift_empty, copy_empty_map, make_sourcedb_all_facet_sources, predict_all_facet_sources, copy_predict_all_model_map, corrupt_all_model_data, copy_corrupted_all_model_map, add_all_facet_sources, add_imaging_cols_empty, shift_cal, copy_cal_map, add_cal_facet_sources, {% if transfer_nearest_solutions %}expand_merged_parmdb_map_transfer, apply_dir_dep_fast_transfer, apply_dir_dep_slow_transfer, {% else %}apply_dir_indep, {% endif %}create_compressed_mapfile_data, check_for_missing_bands, concat_data, concat_corr, {% if pre_average %}pre_average, concat_blavg_data,{% endif %} copy_column1, {% if pre_average %}copy_column2, copy_column3,{% endif %} make_chunks, create_chunks_map, add_imaging_cols, create_chunks_compressed_mapfile, concat_chunks, {% if not transfer_nearest_solutions %}average0, create_compressed_mapfile0, concat0, casa_image01, adjust_casa_mapfile0, mask0, casa_image02, create_model0_map, casa_ft0, switch_weights_col1, solve_phaseonly1, switch_weights_col2, apply_phaseonly1, average1, create_compressed_mapfile1, concat1, casa_image11, adjust_casa_mapfile1, mask1, casa_image12, create_model1_map, casa_ft1, switch_weights_col3, solve_phaseonly2, switch_weights_col4, apply_phaseonly2, average2, create_compressed_mapfile2, concat2, casa_image21, adjust_casa_mapfile2, mask2, casa_image22, create_model2_map, casa_ft2, switch_weights_col5, {% endif %}solve_ampphase11, switch_weights_col6, apply_ampphase11, solve_ampphase12, merge_amp_parmdbs1, smooth_amp1, expand_smoothed_amp1_parmdb_map, apply_amp1, average3, create_compressed_mapfile3, concat3, casa_image31, adjust_casa_mapfile3, mask3, casa_image32, loop_ampcal, merge_selfcal_parmdbs, copy_merged_parmdb_map, expand_merged_parmdb_map, apply_dir_dep_fast, apply_dir_dep_slow, average5, create_compressed_mapfile5, {% block full_image_steps %}concat_averaged, premask, wsclean_image_full1, create_imagebase_map, adjust_wsclean_mapfile1, copy_beam_info, mask5, wsclean_image_full2, create_model4_map, adjust_wsclean_mapfile2, pad_model_images, create_expanded_model_mapfile, create_expanded_size_mapfile, wsclean_ft{% endblock full_image_steps %}, corrupt_final_model, copy_final_model_map, subtract_initial_final, shift_diff_model_to_field, copy_diff_model_field_map, create_single_band_mapfile, create_single_model_mapfile, subtract_single, average_pre, average_post, wsclean_pre, wsclean_post, verify_subtract, copy_verify_subtract_pre_map, copy_verify_subtract_post_map, copy_verify_subtract_break_map]

pipeline.pluginpath                                        =   {{ pipeline_dir }}/plugins

update_mapfile_hosts.control.kind                          =   plugin
update_mapfile_hosts.control.type                          =   updateHosts
update_mapfile_hosts.control.mapfile_dir                   =   input.output.mapfile_dir
update_mapfile_hosts.control.hosts                         =   {{ hosts }}

create_ms_map.control.kind                                 =   plugin
create_ms_map.control.type                                 =   addListMapfile
create_ms_map.control.hosts                                =   {{ hosts }}
create_ms_map.control.files                                =   {{ ms_files }}
create_ms_map.control.mapfile_dir                          =   {{ mapfile_dir }}
create_ms_map.control.filename                             =   input_bands.datamap

create_parmdb_map.control.kind                             =   plugin
create_parmdb_map.control.type                             =   addListMapfile
create_parmdb_map.control.hosts                            =   {{ hosts }}
create_parmdb_map.control.files                            =   {{ dir_indep_parmdbs }}
create_parmdb_map.control.mapfile_dir                      =   {{ mapfile_dir }}
create_parmdb_map.control.filename                         =   dir_indep_instrument_parmdbs.datamap

create_full_skymodels_map.control.kind                     =   plugin
create_full_skymodels_map.control.type                     =   addListMapfile
create_full_skymodels_map.control.hosts                    =   {{ hosts }}
create_full_skymodels_map.control.files                    =   {{ skymodels }}
create_full_skymodels_map.control.mapfile_dir              =   {{ mapfile_dir }}
create_full_skymodels_map.control.filename                 =   full_skymodels.datamap

make_facet_skymodels_all.control.type                      =   make_facet_skymodel
make_facet_skymodels_all.control.mapfile_in                =   create_full_skymodels_map.output.mapfile
make_facet_skymodels_all.control.inputkey                  =   fullmodelfile
make_facet_skymodels_all.control.outputkey                 =   outfile
make_facet_skymodels_all.argument.flags                    =   [fullmodelfile,outfile,{{ vertices_file }}]
make_facet_skymodels_all.argument.cal_only                 =   False

copy_facet_skymodels_all_map.control.kind                  =   plugin
copy_facet_skymodels_all_map.control.type                  =   copyMapfile
copy_facet_skymodels_all_map.control.mapfile_in            =   make_facet_skymodels_all.output.mapfile
copy_facet_skymodels_all_map.control.mapfile_dir           =   {{ mapfile_dir }}
copy_facet_skymodels_all_map.control.filename              =   facet_skymodels.datamap

make_facet_skymodels_cal.control.type                      =   make_facet_skymodel
make_facet_skymodels_cal.control.mapfile_in                =   create_full_skymodels_map.output.mapfile
make_facet_skymodels_cal.control.inputkey                  =   fullmodelfile
make_facet_skymodels_cal.control.outputkey                 =   outfile
make_facet_skymodels_cal.argument.flags                    =   [fullmodelfile,outfile,{{ vertices_file }}]
make_facet_skymodels_cal.argument.cal_only                 =   True
make_facet_skymodels_cal.argument.facet_ra                 =   {{ ra }}
make_facet_skymodels_cal.argument.facet_dec                =   {{ dec }}
make_facet_skymodels_cal.argument.cal_radius_deg           =   {{ cal_radius_deg }}

# Get the clip level in Jy of the lowest-freq model
select_single_cliplevel_cal.control.kind                   =   plugin
select_single_cliplevel_cal.control.type                   =   filterMapfile
select_single_cliplevel_cal.control.mapfile_in             =   make_facet_skymodels_cal.output.clip_level_jy_cal.mapfile
select_single_cliplevel_cal.control.mapfile_dir            =   {{ mapfile_dir }}
select_single_cliplevel_cal.control.filename               =   clip_level_jy_cal.datamap
select_single_cliplevel_cal.control.index                  =   0

shift_empty.control.type                                   =   dppp
shift_empty.control.opts.mapfile_in                        =   create_ms_map.output.mapfile
shift_empty.control.opts.inputkey                          =   msin
shift_empty.argument.msin.datacolumn                       =   {{ subtracted_data_colname }}
shift_empty.argument.msout.overwrite                       =   True
shift_empty.argument.msout.writefullresflag                =   False
shift_empty.argument.local_scratch_dir                     =   {{ local_dir }}
shift_empty.argument.steps                                 =   [shift]
shift_empty.argument.shift.type                            =   phaseshifter
shift_empty.argument.shift.phasecenter                     =   [{{ facet_ra }}deg, {{ facet_dec }}deg]

copy_empty_map.control.kind                                =   plugin
copy_empty_map.control.type                                =   copyMapfile
copy_empty_map.control.mapfile_in                          =   shift_empty.output.mapfile
copy_empty_map.control.mapfile_dir                         =   {{ mapfile_dir }}
copy_empty_map.control.filename                            =   shifted_empty_bands.datamap

make_sourcedb_all_facet_sources.control.type               =   make_sourcedb
make_sourcedb_all_facet_sources.control.opts.mapfile_in    =   make_facet_skymodels_all.output.mapfile
make_sourcedb_all_facet_sources.control.opts.inputkey      =   in
make_sourcedb_all_facet_sources.argument.format            =   <

predict_all_facet_sources.control.type                     =   dppp
predict_all_facet_sources.control.opts.mapfiles_in         =   [shift_empty.output.mapfile,make_sourcedb_all_facet_sources.output.mapfile]
predict_all_facet_sources.control.opts.inputkeys           =   [msin,sourcedb]
predict_all_facet_sources.argument.msout.overwrite         =   True
predict_all_facet_sources.argument.msout.writefullresflag  =   False
predict_all_facet_sources.argument.local_scratch_dir       =   {{ local_dir }}
predict_all_facet_sources.argument.steps                   =   [predict_all]
predict_all_facet_sources.argument.predict_all.type        =   predict
predict_all_facet_sources.argument.predict_all.sourcedb    =   sourcedb

copy_predict_all_model_map.control.kind                    =   plugin
copy_predict_all_model_map.control.type                    =   copyMapfile
copy_predict_all_model_map.control.mapfile_in              =   predict_all_facet_sources.output.mapfile
copy_predict_all_model_map.control.mapfile_dir             =   {{ mapfile_dir }}
copy_predict_all_model_map.control.filename                =   predict_all_model_bands.datamap

corrupt_all_model_data.control.type                        =   dppp
corrupt_all_model_data.control.opts.mapfiles_in            =   [predict_all_facet_sources.output.mapfile,create_parmdb_map.output.mapfile]
corrupt_all_model_data.control.opts.inputkeys              =   [msin,parmdb]
corrupt_all_model_data.argument.msin.datacolumn            =   DATA
corrupt_all_model_data.argument.msout.overwrite            =   True
corrupt_all_model_data.argument.msout.writefullresflag     =   False
corrupt_all_model_data.argument.local_scratch_dir          =   {{ local_dir }}
corrupt_all_model_data.argument.steps                      =   [corrupt]
corrupt_all_model_data.argument.corrupt.type               =   applycal
corrupt_all_model_data.argument.corrupt.parmdb             =   parmdb
corrupt_all_model_data.argument.corrupt.invert             =   False

copy_corrupted_all_model_map.control.kind                  =   plugin
copy_corrupted_all_model_map.control.type                  =   copyMapfile
copy_corrupted_all_model_map.control.mapfile_in            =   corrupt_all_model_data.output.mapfile
copy_corrupted_all_model_map.control.mapfile_dir           =   {{ mapfile_dir }}
copy_corrupted_all_model_map.control.filename              =   corrupted_all_model_bands.datamap

add_all_facet_sources.control.type                         =   add_subtract_columns
add_all_facet_sources.control.opts.mapfiles_in             =   [shift_empty.output.mapfile,corrupt_all_model_data.output.mapfile]
add_all_facet_sources.control.opts.inputkeys               =   [file1,file2]
add_all_facet_sources.argument.flags                       =   [file1,file2,DATA,DATA,FACET_DATA_ALL,add]

add_imaging_cols_empty.control.type                        =   add_imaging_columns
add_imaging_cols_empty.control.mapfile_in                  =   shift_empty.output.mapfile
add_imaging_cols_empty.control.inputkey                    =   msfile
add_imaging_cols_empty.argument.flags                      =   [msfile]

shift_cal.control.type                                     =   dppp
shift_cal.control.opts.mapfile_in                          =   create_ms_map.output.mapfile
shift_cal.control.opts.inputkey                            =   msin
shift_cal.argument.msin.datacolumn                         =   {{ subtracted_data_colname }}
shift_cal.argument.msout.overwrite                         =   True
shift_cal.argument.msout.writefullresflag                  =   False
shift_cal.argument.local_scratch_dir                       =   {{ local_dir }}
shift_cal.argument.steps                                   =   [shift,avg]
shift_cal.argument.shift.type                              =   phaseshifter
shift_cal.argument.shift.phasecenter                       =   [{{ ra }}deg, {{ dec }}deg]
shift_cal.argument.avg.type                                =   squash
shift_cal.argument.avg.freqstep                            =   {{ facetselfcal_freqstep }}
shift_cal.argument.avg.timestep                            =   1

copy_cal_map.control.kind                                  =   plugin
copy_cal_map.control.type                                  =   copyMapfile
copy_cal_map.control.mapfile_in                            =   shift_cal.output.mapfile
copy_cal_map.control.mapfile_dir                           =   {{ mapfile_dir }}
copy_cal_map.control.filename                              =   shifted_cal_bands.datamap

add_cal_facet_sources.control.type                         =   calibrate-stand-alone_new
add_cal_facet_sources.argument.observation                 =   shift_cal.output.mapfile
add_cal_facet_sources.argument.parset                      =   {{ parset_dir }}/facet_dirindep_add.parset
add_cal_facet_sources.argument.catalog                     =   make_facet_skymodels_cal.output.mapfile
add_cal_facet_sources.argument.parmdb                      =   create_parmdb_map.output.mapfile
add_cal_facet_sources.argument.replace-sourcedb            =   True
add_cal_facet_sources.argument.replace-parmdb              =   True
add_cal_facet_sources.argument.no-columns                  =   True

{% if transfer_nearest_solutions %}
# Make dir-dependent parmdb mapfiles for transfer
expand_merged_parmdb_map_transfer.control.kind             =   plugin
expand_merged_parmdb_map_transfer.control.type             =   expandMapfile
expand_merged_parmdb_map_transfer.control.mapfile_in       =   {{ dir_dep_parmdb_datamap }}
expand_merged_parmdb_map_transfer.control.mapfile_to_match =   create_ms_map.output.mapfile
expand_merged_parmdb_map_transfer.control.mapfile_dir      =   {{ mapfile_dir }}
expand_merged_parmdb_map_transfer.control.filename         =   expand_merged_parmdbs_transfer.datamap

apply_dir_dep_fast_transfer.control.type                   =   calibrate-stand-alone_new
apply_dir_dep_fast_transfer.control.mapfiles_in            =   [shift_cal.output.mapfile,expand_merged_parmdb_map_transfer.output.mapfile]
apply_dir_dep_fast_transfer.control.inputkeys              =   [inputms,inputparmdb]
apply_dir_dep_fast_transfer.argument.observation           =   inputms
apply_dir_dep_fast_transfer.argument.parset                =   {{ parset_dir }}//facet_dirdep_apply_fast.parset
apply_dir_dep_fast_transfer.argument.catalog               =   {{ skymodel_dir }}/empty.skymodel
apply_dir_dep_fast_transfer.argument.parmdb                =   inputparmdb
apply_dir_dep_fast_transfer.argument.replace-sourcedb      =   True
apply_dir_dep_fast_transfer.argument.replace-parmdb        =   True

apply_dir_dep_slow_transfer.control.type                   =   calibrate-stand-alone_new
apply_dir_dep_slow_transfer.control.mapfiles_in            =   [shift_cal.output.mapfile,expand_merged_parmdb_map_transfer.output.mapfile]
apply_dir_dep_slow_transfer.control.inputkeys              =   [inputms,inputparmdb]
apply_dir_dep_slow_transfer.argument.observation           =   inputms
apply_dir_dep_slow_transfer.argument.parset                =   {{ parset_dir }}//facet_dirdep_apply_slow.parset
apply_dir_dep_slow_transfer.argument.catalog               =   {{ skymodel_dir }}/empty.skymodel
apply_dir_dep_slow_transfer.argument.parmdb                =   inputparmdb
apply_dir_dep_slow_transfer.argument.replace-sourcedb      =   True
apply_dir_dep_slow_transfer.argument.replace-parmdb        =   True
{% else %}
apply_dir_indep.control.type                               =   calibrate-stand-alone_new
apply_dir_indep.argument.observation                       =   shift_cal.output.mapfile
apply_dir_indep.argument.parset                            =   {{ parset_dir }}/facet_dirindep_apply.parset
apply_dir_indep.argument.catalog                           =   {{ skymodel_dir }}/empty.skymodel
apply_dir_indep.argument.parmdb                            =   create_parmdb_map.output.mapfile
apply_dir_indep.argument.replace-sourcedb                  =   True
apply_dir_indep.argument.replace-parmdb                    =   True
apply_dir_indep.argument.no-columns                        =   True
{% endif %}

create_compressed_mapfile_data.control.kind                =   plugin
create_compressed_mapfile_data.control.type                =   compressMapfile
create_compressed_mapfile_data.control.mapfile_in          =   shift_cal.output.mapfile
create_compressed_mapfile_data.control.mapfile_dir         =   {{ mapfile_dir }}
create_compressed_mapfile_data.control.filename            =   concat_input.datamap

check_for_missing_bands.control.type                       =   check_for_missing_bands
check_for_missing_bands.control.mapfile_in                 =   create_compressed_mapfile_data.output.mapfile
check_for_missing_bands.control.inputkey                   =   mslist
check_for_missing_bands.argument.flags                     =   [mslist]

concat_data.control.type                                   =   dppp
concat_data.control.mapfile_in                             =   check_for_missing_bands.output.padded_list.mapfile
concat_data.control.inputkey                               =   msin
concat_data.argument.msin.datacolumn                       =   DATA
concat_data.argument.msin.missingdata                      =   True
concat_data.argument.msin.orderms                          =   False
concat_data.argument.msout.overwrite                       =   True
concat_data.argument.msout.writefullresflag                =   False
concat_data.argument.local_scratch_dir                     =   {{ local_dir }}
concat_data.argument.steps                                 =   []

concat_corr.control.type                                   =   dppp
concat_corr.control.mapfile_in                             =   check_for_missing_bands.output.padded_list.mapfile
concat_corr.control.inputkey                               =   msin
concat_corr.argument.msin.datacolumn                       =   CORRECTED_DATA
concat_corr.argument.msin.missingdata                      =   True
concat_corr.argument.msin.orderms                          =   False
concat_corr.argument.msout.overwrite                       =   True
concat_corr.argument.msout.writefullresflag                =   False
concat_corr.argument.local_scratch_dir                     =   {{ local_dir }}
concat_corr.argument.steps                                 =   []

{% if pre_average %}
# Do the baseline-dependent preaveraging. This must be done after concatenation
# of DATA and CORRECTED_DATA in the previous two steps so that we can safely
# overwrite the WEIGHT_SPECTRUM column
pre_average.control.type                                   =   pre_average
pre_average.control.mapfiles_in                            =   [shift_cal.output.mapfile,create_parmdb_map.output.mapfile]
pre_average.control.inputkeys                              =   [datafile,parmdb]
pre_average.argument.flags                                 =   [datafile,parmdb,DATA,BLAVG_DATA,{{ target_rms_rad }}]

# Concat the preaveraged data (and weights)
concat_blavg_data.control.type                             =   dppp
concat_blavg_data.control.mapfile_in                       =   check_for_missing_bands.output.padded_list.mapfile
concat_blavg_data.control.inputkey                         =   msin
concat_blavg_data.argument.msin.datacolumn                 =   BLAVG_DATA
concat_blavg_data.argument.msin.missingdata                =   True
concat_blavg_data.argument.msin.orderms                    =   False
concat_blavg_data.argument.msout.overwrite                 =   True
concat_blavg_data.argument.msout.writefullresflag          =   False
concat_blavg_data.argument.local_scratch_dir               =   {{ local_dir }}
concat_blavg_data.argument.steps                           =   []
{% endif %}

# Copy all the columns needed for selfcal to a single concatenated dataset:
# Copy CORRECTED_DATA
copy_column1.control.type                                  =   copy_column
copy_column1.control.mapfiles_in                           =   [concat_corr.output.mapfile,concat_data.output.mapfile]
copy_column1.control.inputkeys                             =   [corrdatafile,datafile]
copy_column1.argument.flags                                =   [corrdatafile,datafile,DATA,CORRECTED_DATA]

{% if pre_average %}
# Copy BLAVG_DATA
copy_column2.control.type                                  =   copy_column
copy_column2.control.mapfiles_in                           =   [concat_blavg_data.output.mapfile,concat_data.output.mapfile]
copy_column2.control.inputkeys                             =   [blavgfile,datafile]
copy_column2.argument.flags                                =   [blavgfile,datafile,DATA,BLAVG_DATA]

# Copy BLAVG_WEIGHT_SPECTRUM
copy_column3.control.type                                  =   copy_column
copy_column3.control.mapfiles_in                           =   [concat_blavg_data.output.mapfile,concat_data.output.mapfile]
copy_column3.control.inputkeys                             =   [blavgfile,datafile]
copy_column3.argument.flags                                =   [blavgfile,datafile,WEIGHT_SPECTRUM,{{ blavg_weight_column }}]
{% endif %}

make_chunks.control.type                                   =   chunk_by_time
make_chunks.control.mapfile_in                             =   concat_data.output.mapfile
make_chunks.control.inputkey                               =   msfile
make_chunks.argument.flags                                 =   [msfile,{{ chunk_width }},{{ local_dir }}]

create_chunks_map.control.kind                             =   plugin
create_chunks_map.control.type                             =   addListMapfile
create_chunks_map.control.files                            =   make_chunks.output.files.mapfile
create_chunks_map.control.hosts                            =   {{ hosts }}
create_chunks_map.control.mapfile_dir                      =   {{ mapfile_dir }}
create_chunks_map.control.filename                         =   chunk_files.datamap

add_imaging_cols.control.type                              =   add_imaging_columns
add_imaging_cols.control.mapfile_in                        =   create_chunks_map.output.mapfile
add_imaging_cols.control.inputkey                          =   msfile
add_imaging_cols.argument.flags                            =   [msfile]

create_chunks_compressed_mapfile.control.kind              =   plugin
create_chunks_compressed_mapfile.control.type              =   compressMapfile
create_chunks_compressed_mapfile.control.mapfile_in        =   create_chunks_map.output.mapfile
create_chunks_compressed_mapfile.control.mapfile_dir       =   {{ mapfile_dir }}
create_chunks_compressed_mapfile.control.filename          =   concat_chunks_input.datamap

concat_chunks.control.type                                 =   virtual_concat
concat_chunks.control.mapfile_in                           =   create_chunks_compressed_mapfile.output.mapfile
concat_chunks.control.inputkey                             =   msfiles
concat_chunks.control.outputkey                            =   msconcat
concat_chunks.argument.flags                               =   [msfiles,msconcat]

{% if not transfer_nearest_solutions %}
average0.control.type                                      =   dppp
average0.control.mapfile_in                                =   create_chunks_map.output.mapfile
average0.control.inputkey                                  =   msin
average0.argument.msin.datacolumn                          =   CORRECTED_DATA
average0.argument.msout.overwrite                          =   True
average0.argument.msout.writefullresflag                   =   False
average0.argument.local_scratch_dir                        =   {{ local_dir }}
average0.argument.steps                                    =   [avg]
average0.argument.avg.type                                 =   squash
average0.argument.avg.freqstep                             =   1
average0.argument.avg.timestep                             =   {{ facetselfcal_timestep }}

create_compressed_mapfile0.control.kind                    =   plugin
create_compressed_mapfile0.control.type                    =   compressMapfile
create_compressed_mapfile0.control.mapfile_in              =   average0.output.mapfile
create_compressed_mapfile0.control.mapfile_dir             =   {{ mapfile_dir }}
create_compressed_mapfile0.control.filename                =   concat0_input.datamap

concat0.control.type                                       =   virtual_concat
concat0.control.mapfile_in                                 =   create_compressed_mapfile0.output.mapfile
concat0.control.inputkey                                   =   msfiles
concat0.control.outputkey                                  =   msconcat
concat0.argument.flags                                     =   [msfiles,msconcat]

casa_image01.control.type                                  =   casa_clean
casa_image01.control.mapfile_in                            =   concat0.output.mapfile
casa_image01.control.inputkey                              =   clean.vis
casa_image01.control.outputkey                             =   clean.imagename
casa_image01.control.arguments                             =   [--nologger,--nogui,-c]
casa_image01.argument.clean.wprojplanes                    =   {{ cal_wplanes }}
casa_image01.argument.clean.uvrange                        =   '>80lambda'
casa_image01.argument.clean.nterms                         =   {{ nterms }}
casa_image01.argument.clean.niter                          =   1000
casa_image01.argument.clean.threshold                      =   '0mJy'
casa_image01.argument.clean.imsize                         =   [{{ cal_imsize }}, {{ cal_imsize }}]
casa_image01.argument.clean.cell                           =   ['1.5arcsec', '1.5arcsec']
casa_image01.argument.clean.robust                         =   -0.25
casa_image01.argument.clean.multiscale                     =   [0, 3, 7, 25, 60, 150]
casa_image01.argument.clean.selectdata                     =   True
casa_image01.argument.clean.gridmode                       =   'widefield'
casa_image01.argument.clean.interactive                    =   False
casa_image01.argument.clean.mode                           =   'mfs'
casa_image01.argument.clean.gain                           =   0.1
casa_image01.argument.clean.psfmode                        =   'clark'
casa_image01.argument.clean.imagermode                     =   'csclean'
casa_image01.argument.clean.ftmachine                      =   'mosaic'
casa_image01.argument.clean.mosweight                      =   False
casa_image01.argument.clean.scaletype                      =   'SAULT'
casa_image01.argument.clean.weighting                      =   'briggs'
casa_image01.argument.clean.uvtaper                        =   False
casa_image01.argument.clean.pbcor                          =   False
casa_image01.argument.clean.minpb                          =   0.2
casa_image01.argument.clean.npixels                        =   0
casa_image01.argument.clean.npercycle                      =   100
casa_image01.argument.clean.cyclefactor                    =   2.5
casa_image01.argument.clean.cyclespeedup                   =   -1
casa_image01.argument.clean.chaniter                       =   False
casa_image01.argument.clean.flatnoise                      =   True
casa_image01.argument.clean.allowchunk                     =   False
casa_image01.argument.clean.mask                           =   {{ region_selfcal }}

adjust_casa_mapfile0.control.kind                          =   plugin
adjust_casa_mapfile0.control.type                          =   appendMapfile
adjust_casa_mapfile0.control.mapfile_in                    =   casa_image01.output.casa_image01.image.mapfile
adjust_casa_mapfile0.control.append                        =   {{ casa_suffix }}
adjust_casa_mapfile0.control.mapfile_dir                   =   {{ mapfile_dir }}
adjust_casa_mapfile0.control.filename                      =   mask0_input.datamap

mask0.control.type                                         =   make_clean_mask
mask0.control.mapfile_in                                   =   adjust_casa_mapfile0.output.mapfile
mask0.control.inputkey                                     =   imagefile
mask0.control.outputkey                                    =   maskfile
mask0.argument.flags                                       =   [imagefile,maskfile]
mask0.argument.region_file                                 =   {{ region_selfcal }}
mask0.argument.threshpix                                   =   10
mask0.argument.threshisl                                   =   6
mask0.argument.iterate_threshold                           =   True
mask0.argument.atrous_do                                   =   {{ atrous_do }}
mask0.argument.rmsbox                                      =   (80,20)
mask0.argument.adaptive_rmsbox                             =   True
mask0.argument.img_format                                  =   casa
mask0.argument.threshold_format                            =   str_with_units

casa_image02.control.type                                  =   casa_clean
casa_image02.control.mapfiles_in                           =   [concat0.output.mapfile,mask0.output.mapfile]
casa_image02.control.inputkeys                             =   [clean.vis,clean.mask]
casa_image02.control.outputkey                             =   clean.imagename
casa_image02.control.arguments                             =   [--nologger,--nogui,-c]
casa_image02.argument.clean.wprojplanes                    =   {{ cal_wplanes }}
casa_image02.argument.clean.uvrange                        =   '>80lambda'
casa_image02.argument.clean.nterms                         =   {{ nterms }}
casa_image02.argument.clean.niter                          =   1000
casa_image02.argument.clean.imsize                         =   [{{ cal_imsize }}, {{ cal_imsize }}]
casa_image02.argument.clean.cell                           =   ['1.5arcsec', '1.5arcsec']
casa_image02.argument.clean.robust                         =   -0.25
casa_image02.argument.clean.multiscale                     =   [0, 3, 7, 25, 60, 150]
casa_image02.argument.clean.selectdata                     =   True
casa_image02.argument.clean.gridmode                       =   'widefield'
casa_image02.argument.clean.interactive                    =   False
casa_image02.argument.clean.mode                           =   'mfs'
casa_image02.argument.clean.gain                           =   0.1
casa_image02.argument.clean.psfmode                        =   'clark'
casa_image02.argument.clean.imagermode                     =   'csclean'
casa_image02.argument.clean.ftmachine                      =   'mosaic'
casa_image02.argument.clean.mosweight                      =   False
casa_image02.argument.clean.scaletype                      =   'SAULT'
casa_image02.argument.clean.weighting                      =   'briggs'
casa_image02.argument.clean.uvtaper                        =   False
casa_image02.argument.clean.pbcor                          =   False
casa_image02.argument.clean.minpb                          =   0.2
casa_image02.argument.clean.npixels                        =   0
casa_image02.argument.clean.npercycle                      =   100
casa_image02.argument.clean.cyclefactor                    =   2.5
casa_image02.argument.clean.cyclespeedup                   =   -1
casa_image02.argument.clean.chaniter                       =   False
casa_image02.argument.clean.flatnoise                      =   True
casa_image02.argument.clean.allowchunk                     =   False

create_model0_map.control.kind                             =   plugin
create_model0_map.control.type                             =   trimMapfile
create_model0_map.control.mapfile_in                       =   casa_image02.output.casa_image02.model.mapfile
create_model0_map.control.trim                             =   .model
create_model0_map.control.mapfile_dir                      =   {{ mapfile_dir }}
create_model0_map.control.filename                         =   model0_rootnames.datamap

casa_ft0.control.type                                      =   casa
casa_ft0.control.mapfiles_in                               =   [concat_chunks.output.mapfile,create_model0_map.output.mapfile]
casa_ft0.control.inputkeys                                 =   [inputms,modelimg]
casa_ft0.control.arguments                                 =   [--nologger,--nogui,-c,{{ script_dir }}/do_ft.py,inputms,modelimg,{{ nterms }},{{ cal_wplanes }},{{ script_dir }}/ftw.xml,{{ script_dir }}/task_ftw.py]

switch_weights_col1.control.type                           =   switch_columns
switch_weights_col1.control.mapfile_in                     =   create_chunks_map.output.mapfile
switch_weights_col1.control.inputkey                       =   msfiles
switch_weights_col1.argument.flags                         =   [msfiles,WEIGHT_SPECTRUM,{{ blavg_weight_column }}]

solve_phaseonly1.control.type                              =   calibrate-stand-alone_new
solve_phaseonly1.argument.observation                      =   create_chunks_map.output.mapfile
solve_phaseonly1.argument.parset                           =   {{ parset_dir }}/facet_dirdep_phaseonly_solve.parset
solve_phaseonly1.argument.catalog                          =   {{ skymodel_dir }}/empty.skymodel
solve_phaseonly1.argument.replace-sourcedb                 =   True
solve_phaseonly1.argument.replace-parmdb                   =   True
solve_phaseonly1.argument.Strategy.InputColumn             =   {{ data_column }}
solve_phaseonly1.argument.Step.solve.Solve.CellSize.Time   =   {{ solint_p }}

switch_weights_col2.control.type                           =   switch_columns
switch_weights_col2.control.mapfile_in                     =   create_chunks_map.output.mapfile
switch_weights_col2.control.inputkey                       =   msfiles
switch_weights_col2.argument.flags                         =   [msfiles,WEIGHT_SPECTRUM,{{ blavg_weight_column }}]

apply_phaseonly1.control.type                              =   calibrate-stand-alone_new
apply_phaseonly1.argument.observation                      =   create_chunks_map.output.mapfile
apply_phaseonly1.argument.parset                           =   {{ parset_dir }}/facet_dirdep_phaseonly_apply.parset
apply_phaseonly1.argument.catalog                          =   {{ skymodel_dir }}/empty.skymodel

average1.control.type                                      =   dppp
average1.control.mapfile_in                                =   create_chunks_map.output.mapfile
average1.control.inputkey                                  =   msin
average1.argument.msin.datacolumn                          =   CORRECTED_DATA
average1.argument.msout.overwrite                          =   True
average1.argument.msout.writefullresflag                   =   False
average1.argument.local_scratch_dir                        =   {{ local_dir }}
average1.argument.steps                                    =   [avg]
average1.argument.avg.type                                 =   squash
average1.argument.avg.freqstep                             =   1
average1.argument.avg.timestep                             =   {{ facetselfcal_timestep }}

create_compressed_mapfile1.control.kind                    =   plugin
create_compressed_mapfile1.control.type                    =   compressMapfile
create_compressed_mapfile1.control.mapfile_in              =   average1.output.mapfile
create_compressed_mapfile1.control.mapfile_dir             =   {{ mapfile_dir }}
create_compressed_mapfile1.control.filename                =   concat1_input.datamap

concat1.control.type                                       =   virtual_concat
concat1.control.mapfile_in                                 =   create_compressed_mapfile1.output.mapfile
concat1.control.inputkey                                   =   msfiles
concat1.control.outputkey                                  =   msconcat
concat1.argument.flags                                     =   [msfiles,msconcat]

casa_image11.control.type                                  =   casa_clean
casa_image11.control.mapfile_in                            =   concat1.output.mapfile
casa_image11.control.inputkey                              =   clean.vis
casa_image11.control.outputkey                             =   clean.imagename
casa_image11.control.arguments                             =   [--nologger,--nogui,-c]
casa_image11.argument.clean.wprojplanes                    =   {{ cal_wplanes }}
casa_image11.argument.clean.uvrange                        =   '>80lambda'
casa_image11.argument.clean.nterms                         =   {{ nterms }}
casa_image11.argument.clean.niter                          =   1000
casa_image11.argument.clean.threshold                      =   '0mJy'
casa_image11.argument.clean.imsize                         =   [{{ cal_imsize }}, {{ cal_imsize }}]
casa_image11.argument.clean.cell                           =   ['1.5arcsec', '1.5arcsec']
casa_image11.argument.clean.robust                         =   -0.25
casa_image11.argument.clean.multiscale                     =   [0, 3, 7, 25, 60, 150]
casa_image11.argument.clean.selectdata                     =   True
casa_image11.argument.clean.gridmode                       =   'widefield'
casa_image11.argument.clean.interactive                    =   False
casa_image11.argument.clean.mode                           =   'mfs'
casa_image11.argument.clean.gain                           =   0.1
casa_image11.argument.clean.psfmode                        =   'clark'
casa_image11.argument.clean.imagermode                     =   'csclean'
casa_image11.argument.clean.ftmachine                      =   'mosaic'
casa_image11.argument.clean.mosweight                      =   False
casa_image11.argument.clean.scaletype                      =   'SAULT'
casa_image11.argument.clean.weighting                      =   'briggs'
casa_image11.argument.clean.uvtaper                        =   False
casa_image11.argument.clean.pbcor                          =   False
casa_image11.argument.clean.minpb                          =   0.2
casa_image11.argument.clean.npixels                        =   0
casa_image11.argument.clean.npercycle                      =   100
casa_image11.argument.clean.cyclefactor                    =   2.5
casa_image11.argument.clean.cyclespeedup                   =   -1
casa_image11.argument.clean.chaniter                       =   False
casa_image11.argument.clean.flatnoise                      =   True
casa_image11.argument.clean.allowchunk                     =   False
casa_image11.argument.clean.mask                           =   {{ region_selfcal }}

adjust_casa_mapfile1.control.kind                          =   plugin
adjust_casa_mapfile1.control.type                          =   appendMapfile
adjust_casa_mapfile1.control.mapfile_in                    =   casa_image11.output.casa_image11.image.mapfile
adjust_casa_mapfile1.control.append                        =   {{ casa_suffix }}
adjust_casa_mapfile1.control.mapfile_dir                   =   {{ mapfile_dir }}
adjust_casa_mapfile1.control.filename                      =   mask1_input.datamap

mask1.control.type                                         =   make_clean_mask
mask1.control.mapfile_in                                   =   adjust_casa_mapfile1.output.mapfile
mask1.control.inputkey                                     =   imagefile
mask1.control.outputkey                                    =   maskfile
mask1.argument.flags                                       =   [imagefile,maskfile]
mask1.argument.region_file                                 =   {{ region_selfcal }}
mask1.argument.threshpix                                   =   15
mask1.argument.threshisl                                   =   15
mask1.argument.iterate_threshold                           =   True
mask1.argument.atrous_do                                   =   {{ atrous_do }}
mask1.argument.rmsbox                                      =   (80,20)
mask1.argument.trim_by                                     =   0.2
mask1.argument.img_format                                  =   casa
mask1.argument.threshold_format                            =   str_with_units

casa_image12.control.type                                  =   casa_clean
casa_image12.control.mapfiles_in                           =   [concat1.output.mapfile,mask1.output.mapfile]
casa_image12.control.inputkeys                             =   [clean.vis,clean.mask]
casa_image12.control.outputkey                             =   clean.imagename
casa_image12.control.arguments                             =   [--nologger,--nogui,-c]
casa_image12.argument.clean.wprojplanes                    =   {{ cal_wplanes }}
casa_image12.argument.clean.uvrange                        =   '>80lambda'
casa_image12.argument.clean.nterms                         =   {{ nterms }}
casa_image12.argument.clean.niter                          =   1000
casa_image12.argument.clean.threshold                      =   '0mJy'
casa_image12.argument.clean.imsize                         =   [{{ cal_imsize }}, {{ cal_imsize }}]
casa_image12.argument.clean.cell                           =   ['1.5arcsec', '1.5arcsec']
casa_image12.argument.clean.robust                         =   -0.25
casa_image12.argument.clean.multiscale                     =   [0, 3, 7, 25, 60, 150]
casa_image12.argument.clean.selectdata                     =   True
casa_image12.argument.clean.gridmode                       =   'widefield'
casa_image12.argument.clean.interactive                    =   False
casa_image12.argument.clean.mode                           =   'mfs'
casa_image12.argument.clean.gain                           =   0.1
casa_image12.argument.clean.psfmode                        =   'clark'
casa_image12.argument.clean.imagermode                     =   'csclean'
casa_image12.argument.clean.ftmachine                      =   'mosaic'
casa_image12.argument.clean.mosweight                      =   False
casa_image12.argument.clean.scaletype                      =   'SAULT'
casa_image12.argument.clean.weighting                      =   'briggs'
casa_image12.argument.clean.uvtaper                        =   False
casa_image12.argument.clean.pbcor                          =   False
casa_image12.argument.clean.minpb                          =   0.2
casa_image12.argument.clean.npixels                        =   0
casa_image12.argument.clean.npercycle                      =   100
casa_image12.argument.clean.cyclefactor                    =   2.5
casa_image12.argument.clean.cyclespeedup                   =   -1
casa_image12.argument.clean.chaniter                       =   False
casa_image12.argument.clean.flatnoise                      =   True
casa_image12.argument.clean.allowchunk                     =   False

create_model1_map.control.kind                             =   plugin
create_model1_map.control.type                             =   trimMapfile
create_model1_map.control.mapfile_in                       =   casa_image12.output.casa_image12.model.mapfile
create_model1_map.control.trim                             =   .model
create_model1_map.control.mapfile_dir                      =   {{ mapfile_dir }}
create_model1_map.control.filename                         =   model1_rootnames.datamap

casa_ft1.control.type                                      =   casa
casa_ft1.control.mapfiles_in                               =   [concat_chunks.output.mapfile,create_model1_map.output.mapfile]
casa_ft1.control.inputkeys                                 =   [inputms,modelimg]
casa_ft1.control.arguments                                 =   [--nologger,--nogui,-c,{{ script_dir }}/do_ft.py,inputms,modelimg,{{ nterms }},{{ cal_wplanes }},{{ script_dir }}/ftw.xml,{{ script_dir }}/task_ftw.py]

switch_weights_col3.control.type                           =   switch_columns
switch_weights_col3.control.mapfile_in                     =   create_chunks_map.output.mapfile
switch_weights_col3.control.inputkey                       =   msfiles
switch_weights_col3.argument.flags                         =   [msfiles,WEIGHT_SPECTRUM,{{ blavg_weight_column }}]

solve_phaseonly2.control.type                              =   calibrate-stand-alone_new
solve_phaseonly2.argument.observation                      =   create_chunks_map.output.mapfile
solve_phaseonly2.argument.parset                           =   {{ parset_dir }}/facet_dirdep_phaseonly_solve.parset
solve_phaseonly2.argument.catalog                          =   {{ skymodel_dir }}/empty.skymodel
solve_phaseonly2.argument.replace-sourcedb                 =   True
solve_phaseonly2.argument.replace-parmdb                   =   True
solve_phaseonly2.argument.Strategy.InputColumn             =   {{ data_column }}
solve_phaseonly2.argument.Step.solve.Solve.CellSize.Time   =   {{ solint_p }}

switch_weights_col4.control.type                           =   switch_columns
switch_weights_col4.control.mapfile_in                     =   create_chunks_map.output.mapfile
switch_weights_col4.control.inputkey                       =   msfiles
switch_weights_col4.argument.flags                         =   [msfiles,WEIGHT_SPECTRUM,{{ blavg_weight_column }}]

apply_phaseonly2.control.type                              =   calibrate-stand-alone_new
apply_phaseonly2.argument.observation                      =   create_chunks_map.output.mapfile
apply_phaseonly2.argument.parset                           =   {{ parset_dir }}/facet_dirdep_phaseonly_apply.parset
apply_phaseonly2.argument.catalog                          =   {{ skymodel_dir }}/empty.skymodel

average2.control.type                                      =   dppp
average2.control.mapfile_in                                =   create_chunks_map.output.mapfile
average2.control.inputkey                                  =   msin
average2.argument.msin.datacolumn                          =   CORRECTED_DATA
average2.argument.msout.overwrite                          =   True
average2.argument.msout.writefullresflag                   =   False
average2.argument.local_scratch_dir                        =   {{ local_dir }}
average2.argument.steps                                    =   [avg]
average2.argument.avg.type                                 =   squash
average2.argument.avg.freqstep                             =   1
average2.argument.avg.timestep                             =   {{ facetselfcal_timestep }}

create_compressed_mapfile2.control.kind                    =   plugin
create_compressed_mapfile2.control.type                    =   compressMapfile
create_compressed_mapfile2.control.mapfile_in              =   average2.output.mapfile
create_compressed_mapfile2.control.mapfile_dir             =   {{ mapfile_dir }}
create_compressed_mapfile2.control.filename                =   concat2_input.datamap

concat2.control.type                                       =   virtual_concat
concat2.control.mapfile_in                                 =   create_compressed_mapfile2.output.mapfile
concat2.control.inputkey                                   =   msfiles
concat2.control.outputkey                                  =   msconcat
concat2.argument.flags                                     =   [msfiles,msconcat]

casa_image21.control.type                                  =   casa_clean
casa_image21.control.mapfile_in                            =   concat2.output.mapfile
casa_image21.control.inputkey                              =   clean.vis
casa_image21.control.outputkey                             =   clean.imagename
casa_image21.control.arguments                             =   [--nologger,--nogui,-c]
casa_image21.argument.clean.wprojplanes                    =   {{ cal_wplanes }}
casa_image21.argument.clean.uvrange                        =   '>80lambda'
casa_image21.argument.clean.nterms                         =   {{ nterms }}
casa_image21.argument.clean.niter                          =   1000
casa_image21.argument.clean.threshold                      =   '0mJy'
casa_image21.argument.clean.imsize                         =   [{{ cal_imsize }}, {{ cal_imsize }}]
casa_image21.argument.clean.cell                           =   ['1.5arcsec', '1.5arcsec']
casa_image21.argument.clean.robust                         =   -0.25
casa_image21.argument.clean.multiscale                     =   [0, 3, 7, 25, 60, 150]
casa_image21.argument.clean.selectdata                     =   True
casa_image21.argument.clean.gridmode                       =   'widefield'
casa_image21.argument.clean.interactive                    =   False
casa_image21.argument.clean.mode                           =   'mfs'
casa_image21.argument.clean.gain                           =   0.1
casa_image21.argument.clean.psfmode                        =   'clark'
casa_image21.argument.clean.imagermode                     =   'csclean'
casa_image21.argument.clean.ftmachine                      =   'mosaic'
casa_image21.argument.clean.mosweight                      =   False
casa_image21.argument.clean.scaletype                      =   'SAULT'
casa_image21.argument.clean.weighting                      =   'briggs'
casa_image21.argument.clean.uvtaper                        =   False
casa_image21.argument.clean.pbcor                          =   False
casa_image21.argument.clean.minpb                          =   0.2
casa_image21.argument.clean.npixels                        =   0
casa_image21.argument.clean.npercycle                      =   100
casa_image21.argument.clean.cyclefactor                    =   2.5
casa_image21.argument.clean.cyclespeedup                   =   -1
casa_image21.argument.clean.chaniter                       =   False
casa_image21.argument.clean.flatnoise                      =   True
casa_image21.argument.clean.allowchunk                     =   False
casa_image21.argument.clean.mask                           =   {{ region_selfcal }}

adjust_casa_mapfile2.control.kind                          =   plugin
adjust_casa_mapfile2.control.type                          =   appendMapfile
adjust_casa_mapfile2.control.mapfile_in                    =   casa_image21.output.casa_image21.image.mapfile
adjust_casa_mapfile2.control.append                        =   {{ casa_suffix }}
adjust_casa_mapfile2.control.mapfile_dir                   =   {{ mapfile_dir }}
adjust_casa_mapfile2.control.filename                      =   mask2_input.datamap

mask2.control.type                                         =   make_clean_mask
mask2.control.mapfile_in                                   =   adjust_casa_mapfile2.output.mapfile
mask2.control.inputkey                                     =   imagefile
mask2.control.outputkey                                    =   maskfile
mask2.argument.flags                                       =   [imagefile,maskfile]
mask2.argument.region_file                                 =   {{ region_selfcal }}
mask2.argument.threshpix                                   =   15
mask2.argument.threshisl                                   =   15
mask2.argument.iterate_threshold                           =   True
mask2.argument.atrous_do                                   =   {{ atrous_do }}
mask2.argument.rmsbox                                      =   (80,20)
mask2.argument.trim_by                                     =   0.2
mask2.argument.img_format                                  =   casa
mask2.argument.threshold_format                            =   str_with_units

casa_image22.control.type                                  =   casa_clean
casa_image22.control.mapfiles_in                           =   [concat2.output.mapfile,mask2.output.mapfile]
casa_image22.control.inputkeys                             =   [clean.vis,clean.mask]
casa_image22.control.outputkey                             =   clean.imagename
casa_image22.control.arguments                             =   [--nologger,--nogui,-c]
casa_image22.argument.clean.wprojplanes                    =   {{ cal_wplanes }}
casa_image22.argument.clean.uvrange                        =   '>80lambda'
casa_image22.argument.clean.nterms                         =   {{ nterms }}
casa_image22.argument.clean.niter                          =   1000
casa_image22.argument.clean.threshold                      =   '0mJy'
casa_image22.argument.clean.imsize                         =   [{{ cal_imsize }}, {{ cal_imsize }}]
casa_image22.argument.clean.cell                           =   ['1.5arcsec', '1.5arcsec']
casa_image22.argument.clean.robust                         =   -0.25
casa_image22.argument.clean.multiscale                     =   [0, 3, 7, 25, 60, 150]
casa_image22.argument.clean.selectdata                     =   True
casa_image22.argument.clean.gridmode                       =   'widefield'
casa_image22.argument.clean.interactive                    =   False
casa_image22.argument.clean.mode                           =   'mfs'
casa_image22.argument.clean.gain                           =   0.1
casa_image22.argument.clean.psfmode                        =   'clark'
casa_image22.argument.clean.imagermode                     =   'csclean'
casa_image22.argument.clean.ftmachine                      =   'mosaic'
casa_image22.argument.clean.mosweight                      =   False
casa_image22.argument.clean.scaletype                      =   'SAULT'
casa_image22.argument.clean.weighting                      =   'briggs'
casa_image22.argument.clean.uvtaper                        =   False
casa_image22.argument.clean.pbcor                          =   False
casa_image22.argument.clean.minpb                          =   0.2
casa_image22.argument.clean.npixels                        =   0
casa_image22.argument.clean.npercycle                      =   100
casa_image22.argument.clean.cyclefactor                    =   2.5
casa_image22.argument.clean.cyclespeedup                   =   -1
casa_image22.argument.clean.chaniter                       =   False
casa_image22.argument.clean.flatnoise                      =   True
casa_image22.argument.clean.allowchunk                     =   False

create_model2_map.control.kind                             =   plugin
create_model2_map.control.type                             =   trimMapfile
create_model2_map.control.mapfile_in                       =   casa_image22.output.casa_image22.model.mapfile
create_model2_map.control.trim                             =   .model
create_model2_map.control.mapfile_dir                      =   {{ mapfile_dir }}
create_model2_map.control.filename                         =   model2_rootnames.datamap

casa_ft2.control.type                                      =   casa
casa_ft2.control.mapfiles_in                               =   [concat_chunks.output.mapfile,create_model2_map.output.mapfile]
casa_ft2.control.inputkeys                                 =   [inputms,modelimg]
casa_ft2.control.arguments                                 =   [--nologger,--nogui,-c,{{ script_dir }}/do_ft.py,inputms,modelimg,{{ nterms }},{{ cal_wplanes }},{{ script_dir }}/ftw.xml,{{ script_dir }}/task_ftw.py]

switch_weights_col5.control.type                           =   switch_columns
switch_weights_col5.control.mapfile_in                     =   create_chunks_map.output.mapfile
switch_weights_col5.control.inputkey                       =   msfiles
switch_weights_col5.argument.flags                         =   [msfiles,WEIGHT_SPECTRUM,{{ blavg_weight_column }}]
{% endif %}

solve_ampphase11.control.type                              =   calibrate-stand-alone_new
solve_ampphase11.argument.observation                      =   create_chunks_map.output.mapfile
solve_ampphase11.argument.parset                           =   {{ parset_dir }}/facet_dirdep_phaseonly_solve.parset
solve_ampphase11.argument.catalog                          =   {{ skymodel_dir }}/empty.skymodel
solve_ampphase11.argument.replace-sourcedb                 =   True
solve_ampphase11.argument.replace-parmdb                   =   True
solve_ampphase11.argument.Strategy.InputColumn             =   {{ data_column }}
solve_ampphase11.argument.Step.solve.Solve.CellSize.Time   =   {{ solint_p }}

switch_weights_col6.control.type                           =   switch_columns
switch_weights_col6.control.mapfile_in                     =   create_chunks_map.output.mapfile
switch_weights_col6.control.inputkey                       =   msfiles
switch_weights_col6.argument.flags                         =   [msfiles,WEIGHT_SPECTRUM,{{ blavg_weight_column }}]

apply_ampphase11.control.type                              =   calibrate-stand-alone_new
apply_ampphase11.argument.observation                      =   create_chunks_map.output.mapfile
apply_ampphase11.argument.parset                           =   {{ parset_dir }}/facet_dirdep_phaseonly_apply.parset
apply_ampphase11.argument.catalog                          =   {{ skymodel_dir }}/empty.skymodel

solve_ampphase12.control.type                              =   calibrate-stand-alone_new
solve_ampphase12.argument.observation                      =   create_chunks_map.output.mapfile
solve_ampphase12.argument.parset                           =   {{ parset_dir }}/facet_dirdep_amponly_solve.parset
solve_ampphase12.argument.catalog                          =   {{ skymodel_dir }}/empty.skymodel
solve_ampphase12.argument.replace-sourcedb                 =   True
solve_ampphase12.argument.replace-parmdb                   =   True
solve_ampphase12.argument.Step.solve.Solve.CellSize.Time   =   {{ solint_a }}
solve_ampphase12.argument.Step.solve.Solve.CellSize.Freq   =   {{ solint_freq }}

merge_amp_parmdbs1.control.type                            =   merge_parmdbs_in_time
merge_amp_parmdbs1.control.mapfile_in                      =   create_chunks_compressed_mapfile.output.mapfile
merge_amp_parmdbs1.control.inputkey                        =   mslist
merge_amp_parmdbs1.control.outputkey                       =   outparmdb
merge_amp_parmdbs1.argument.flags                          =   [mslist,instrument,outparmdb]

smooth_amp1.control.type                                   =   smooth_amps
smooth_amp1.control.mapfile_in                             =   merge_amp_parmdbs1.output.mapfile
smooth_amp1.control.inputkey                               =   ampparmdb
smooth_amp1.control.outputkey                              =   outparmdb
smooth_amp1.control.arguments                              =   [ampparmdb,outparmdb]

expand_smoothed_amp1_parmdb_map.control.kind               =   plugin
expand_smoothed_amp1_parmdb_map.control.type               =   expandMapfile
expand_smoothed_amp1_parmdb_map.control.mapfile_in         =   smooth_amp1.output.mapfile
expand_smoothed_amp1_parmdb_map.control.mapfile_to_match   =   create_chunks_map.output.mapfile
expand_smoothed_amp1_parmdb_map.control.mapfile_dir        =   {{ mapfile_dir }}
expand_smoothed_amp1_parmdb_map.control.filename           =   expand_amp1_smoothed_parmdbs.datamap

apply_amp1.control.type                                    =   calibrate-stand-alone_new
apply_amp1.control.mapfiles_in                             =   [create_chunks_map.output.mapfile,expand_smoothed_amp1_parmdb_map.output.mapfile]
apply_amp1.control.inputkeys                               =   [inputms,inputparmdb]
apply_amp1.argument.observation                            =   inputms
apply_amp1.argument.parset                                 =   {{ parset_dir }}/facet_dirdep_amponly_apply.parset
apply_amp1.argument.catalog                                =   {{ skymodel_dir }}/empty.skymodel
apply_amp1.argument.parmdb                                 =   inputparmdb
apply_amp1.argument.replace-sourcedb                       =   True
apply_amp1.argument.replace-parmdb                         =   True

flag1.control.type                                         =   dppp_inplace
flag1.control.mapfiles_in                                  =   [concat_chunks.output.mapfile,select_single_cliplevel_cal.output.mapfile]
flag1.control.inputkeys                                    =   [msin,clip_level]
flag1.argument.msin.datacolumn                             =   CORRECTED_DATA
flag1.argument.msout                                       =   .
flag1.argument.steps                                       =   [flag]
flag1.argument.flag.type                                   =   preflagger
flag1.argument.flag.amplmax                                =   clip_level

average3.control.type                                      =   dppp
average3.control.mapfile_in                                =   create_chunks_map.output.mapfile
average3.control.inputkey                                  =   msin
average3.argument.msin.datacolumn                          =   CORRECTED_DATA
average3.argument.msout.overwrite                          =   True
average3.argument.msout.writefullresflag                   =   False
average3.argument.local_scratch_dir                        =   {{ local_dir }}
average3.argument.steps                                    =   [avg]
average3.argument.avg.type                                 =   squash
average3.argument.avg.freqstep                             =   1
average3.argument.avg.timestep                             =   {{ facetselfcal_timestep }}

create_compressed_mapfile3.control.kind                    =   plugin
create_compressed_mapfile3.control.type                    =   compressMapfile
create_compressed_mapfile3.control.mapfile_in              =   average3.output.mapfile
create_compressed_mapfile3.control.mapfile_dir             =   {{ mapfile_dir }}
create_compressed_mapfile3.control.filename                =   concat3_input.datamap

concat3.control.type                                       =   virtual_concat
concat3.control.mapfile_in                                 =   create_compressed_mapfile3.output.mapfile
concat3.control.inputkey                                   =   msfiles
concat3.control.outputkey                                  =   msconcat
concat3.argument.flags                                     =   [msfiles,msconcat]

casa_image31.control.type                                  =   casa_clean
casa_image31.control.mapfile_in                            =   concat3.output.mapfile
casa_image31.control.inputkey                              =   clean.vis
casa_image31.control.outputkey                             =   clean.imagename
casa_image31.control.arguments                             =   [--nologger,--nogui,-c]
casa_image31.argument.clean.wprojplanes                    =   {{ cal_wplanes }}
casa_image31.argument.clean.uvrange                        =   '>80lambda'
casa_image31.argument.clean.nterms                         =   {{ nterms }}
casa_image31.argument.clean.niter                          =   1000
casa_image31.argument.clean.threshold                      =   '0mJy'
casa_image31.argument.clean.imsize                         =   [{{ cal_imsize }}, {{ cal_imsize }}]
casa_image31.argument.clean.cell                           =   ['1.5arcsec', '1.5arcsec']
casa_image31.argument.clean.robust                         =   -0.25
casa_image31.argument.clean.multiscale                     =   [0, 3, 7, 25, 60, 150]
casa_image31.argument.clean.selectdata                     =   True
casa_image31.argument.clean.gridmode                       =   'widefield'
casa_image31.argument.clean.interactive                    =   False
casa_image31.argument.clean.mode                           =   'mfs'
casa_image31.argument.clean.gain                           =   0.1
casa_image31.argument.clean.psfmode                        =   'clark'
casa_image31.argument.clean.imagermode                     =   'csclean'
casa_image31.argument.clean.ftmachine                      =   'mosaic'
casa_image31.argument.clean.mosweight                      =   False
casa_image31.argument.clean.scaletype                      =   'SAULT'
casa_image31.argument.clean.weighting                      =   'briggs'
casa_image31.argument.clean.uvtaper                        =   False
casa_image31.argument.clean.pbcor                          =   False
casa_image31.argument.clean.minpb                          =   0.2
casa_image31.argument.clean.npixels                        =   0
casa_image31.argument.clean.npercycle                      =   100
casa_image31.argument.clean.cyclefactor                    =   2.5
casa_image31.argument.clean.cyclespeedup                   =   -1
casa_image31.argument.clean.chaniter                       =   False
casa_image31.argument.clean.flatnoise                      =   True
casa_image31.argument.clean.allowchunk                     =   False
casa_image31.argument.clean.mask                           =   {{ region_selfcal }}

adjust_casa_mapfile3.control.kind                          =   plugin
adjust_casa_mapfile3.control.type                          =   appendMapfile
adjust_casa_mapfile3.control.mapfile_in                    =   casa_image31.output.casa_image31.image.mapfile
adjust_casa_mapfile3.control.append                        =   {{ casa_suffix }}
adjust_casa_mapfile3.control.mapfile_dir                   =   {{ mapfile_dir }}
adjust_casa_mapfile3.control.filename                      =   mask3_input.datamap

mask3.control.type                                         =   make_clean_mask
mask3.control.mapfile_in                                   =   adjust_casa_mapfile3.output.mapfile
mask3.control.inputkey                                     =   imagefile
mask3.control.outputkey                                    =   maskfile
mask3.argument.flags                                       =   [imagefile,maskfile]
mask3.argument.region_file                                 =   {{ region_selfcal }}
mask3.argument.threshpix                                   =   10
mask3.argument.threshisl                                   =   10
mask3.argument.iterate_threshold                           =   True
mask3.argument.atrous_do                                   =   {{ atrous_do }}
mask3.argument.rmsbox                                      =   (80,20)
mask3.argument.trim_by                                     =   0.2
mask3.argument.img_format                                  =   casa
mask3.argument.threshold_format                            =   str_with_units

casa_image32.control.type                                  =   casa_clean
casa_image32.control.mapfiles_in                           =   [concat3.output.mapfile,mask3.output.mapfile]
casa_image32.control.inputkeys                             =   [clean.vis,clean.mask]
casa_image32.control.outputkey                             =   clean.imagename
casa_image32.control.arguments                             =   [--nologger,--nogui,-c]
casa_image32.argument.clean.wprojplanes                    =   {{ cal_wplanes }}
casa_image32.argument.clean.uvrange                        =   '>80lambda'
casa_image32.argument.clean.nterms                         =   {{ nterms }}
casa_image32.argument.clean.niter                          =   1000
casa_image32.argument.clean.threshold                      =   '0mJy'
casa_image32.argument.clean.imsize                         =   [{{ cal_imsize }}, {{ cal_imsize }}]
casa_image32.argument.clean.cell                           =   ['1.5arcsec', '1.5arcsec']
casa_image32.argument.clean.robust                         =   -0.25
casa_image32.argument.clean.multiscale                     =   [0, 3, 7, 25, 60, 150]
casa_image32.argument.clean.selectdata                     =   True
casa_image32.argument.clean.gridmode                       =   'widefield'
casa_image32.argument.clean.interactive                    =   False
casa_image32.argument.clean.mode                           =   'mfs'
casa_image32.argument.clean.gain                           =   0.1
casa_image32.argument.clean.psfmode                        =   'clark'
casa_image32.argument.clean.imagermode                     =   'csclean'
casa_image32.argument.clean.ftmachine                      =   'mosaic'
casa_image32.argument.clean.mosweight                      =   False
casa_image32.argument.clean.scaletype                      =   'SAULT'
casa_image32.argument.clean.weighting                      =   'briggs'
casa_image32.argument.clean.uvtaper                        =   False
casa_image32.argument.clean.pbcor                          =   False
casa_image32.argument.clean.minpb                          =   0.2
casa_image32.argument.clean.npixels                        =   0
casa_image32.argument.clean.npercycle                      =   100
casa_image32.argument.clean.cyclefactor                    =   2.5
casa_image32.argument.clean.cyclespeedup                   =   -1
casa_image32.argument.clean.chaniter                       =   False
casa_image32.argument.clean.flatnoise                      =   True
casa_image32.argument.clean.allowchunk                     =   False

loop_ampcal.control.kind                                   =   loop
loop_ampcal.control.type                                   =   conditional
loop_ampcal.control.loopcount                              =   {{ loopcount }}
loop_ampcal.control.loopsteps                              =   [create_model3_map,casa_ft3,{% if pre_average %}switch_weights_col7,{% endif %}solve_ampphase21,{% if pre_average %}switch_weights_col8,{% endif %}apply_ampphase21,merge_phase_parmdbs,solve_ampphase22,merge_amp_parmdbs2,smooth_amp2,expand_smoothed_amp2_parmdb_map,apply_amp2,create_compressed_mapfile_empty,average4,create_compressed_mapfile4,concat4,delete_image,casa_image41,adjust_casa_mapfile4,mask4,casa_image42,adjust_casa_mapfile5,copy_image,check_image]

create_model3_map.control.kind                             =   plugin
create_model3_map.control.type                             =   trimMapfile
create_model3_map.control.mapfile_in                       =   casa_image32.output.casa_image32.model.mapfile
create_model3_map.control.trim                             =   .model
create_model3_map.control.mapfile_dir                      =   {{ mapfile_dir }}
create_model3_map.control.filename                         =   model3_rootnames.datamap
create_model3_map.control.counter                          =   loop_ampcal.output.counter

casa_ft3.control.type                                      =   casa
casa_ft3.control.mapfiles_in                               =   [concat_chunks.output.mapfile,create_model3_map.output.mapfile]
casa_ft3.control.inputkeys                                 =   [inputms,modelimg]
casa_ft3.control.arguments                                 =   [--nologger,--nogui,-c,{{ script_dir }}/do_ft.py,inputms,modelimg,{{ nterms }},{{ cal_wplanes }},{{ script_dir }}/ftw.xml,{{ script_dir }}/task_ftw.py]

switch_weights_col7.control.type                           =   switch_columns
switch_weights_col7.control.mapfile_in                     =   create_chunks_map.output.mapfile
switch_weights_col7.control.inputkey                       =   msfiles
switch_weights_col7.argument.flags                         =   [msfiles,WEIGHT_SPECTRUM,{{ blavg_weight_column }}]

solve_ampphase21.control.type                              =   calibrate-stand-alone_new
solve_ampphase21.argument.observation                      =   create_chunks_map.output.mapfile
solve_ampphase21.argument.parset                           =   {{ parset_dir }}/facet_dirdep_phaseonly_solve.parset
solve_ampphase21.argument.catalog                          =   {{ skymodel_dir }}/empty.skymodel
solve_ampphase21.argument.replace-sourcedb                 =   True
solve_ampphase21.argument.replace-parmdb                   =   True
solve_ampphase21.argument.Strategy.InputColumn             =   {{ data_column }}
solve_ampphase21.argument.Step.solve.Solve.CellSize.Time   =   {{ solint_p }}

switch_weights_col8.control.type                           =   switch_columns
switch_weights_col8.control.mapfile_in                     =   create_chunks_map.output.mapfile
switch_weights_col8.control.inputkey                       =   msfiles
switch_weights_col8.argument.flags                         =   [msfiles,WEIGHT_SPECTRUM,{{ blavg_weight_column }}]

apply_ampphase21.control.type                              =   calibrate-stand-alone_new
apply_ampphase21.argument.observation                      =   create_chunks_map.output.mapfile
apply_ampphase21.argument.parset                           =   {{ parset_dir }}/facet_dirdep_phaseonly_apply.parset
apply_ampphase21.argument.catalog                          =   {{ skymodel_dir }}/empty.skymodel

merge_phase_parmdbs.control.type                           =   merge_parmdbs_in_time
merge_phase_parmdbs.control.mapfile_in                     =   create_chunks_compressed_mapfile.output.mapfile
merge_phase_parmdbs.control.inputkey                       =   mslist
merge_phase_parmdbs.control.outputkey                      =   outparmdb
merge_phase_parmdbs.argument.flags                         =   [mslist,instrument,outparmdb]

solve_ampphase22.control.type                              =   calibrate-stand-alone_new
solve_ampphase22.argument.observation                      =   create_chunks_map.output.mapfile
solve_ampphase22.argument.parset                           =   {{ parset_dir }}/facet_dirdep_amponly_solve.parset
solve_ampphase22.argument.catalog                          =   {{ skymodel_dir }}/empty.skymodel
solve_ampphase22.argument.replace-sourcedb                 =   True
solve_ampphase22.argument.replace-parmdb                   =   True
solve_ampphase22.argument.Step.solve.Solve.CellSize.Time   =   {{ solint_a }}
solve_ampphase22.argument.Step.solve.Solve.CellSize.Freq   =   {{ solint_freq }}

merge_amp_parmdbs2.control.type                            =   merge_parmdbs_in_time
merge_amp_parmdbs2.control.mapfile_in                      =   create_chunks_compressed_mapfile.output.mapfile
merge_amp_parmdbs2.control.inputkey                        =   mslist
merge_amp_parmdbs2.control.outputkey                       =   outparmdb
merge_amp_parmdbs2.argument.flags                          =   [mslist,instrument,outparmdb]

smooth_amp2.control.type                                   =   smooth_amps
smooth_amp2.control.mapfile_in                             =   merge_amp_parmdbs2.output.mapfile
smooth_amp2.control.inputkey                               =   ampparmdb
smooth_amp2.control.outputkey                              =   outparmdb
smooth_amp2.control.arguments                              =   [ampparmdb,outparmdb]

expand_smoothed_amp2_parmdb_map.control.kind               =   plugin
expand_smoothed_amp2_parmdb_map.control.type               =   expandMapfile
expand_smoothed_amp2_parmdb_map.control.mapfile_in         =   smooth_amp2.output.mapfile
expand_smoothed_amp2_parmdb_map.control.mapfile_to_match   =   create_chunks_map.output.mapfile
expand_smoothed_amp2_parmdb_map.control.mapfile_dir        =   {{ mapfile_dir }}
expand_smoothed_amp2_parmdb_map.control.filename           =   expand_amp2_smoothed_parmdbs.datamap

apply_amp2.control.type                                    =   calibrate-stand-alone_new
apply_amp2.control.mapfiles_in                             =   [create_chunks_map.output.mapfile,expand_smoothed_amp2_parmdb_map.output.mapfile]
apply_amp2.control.inputkeys                               =   [inputms,inputparmdb]
apply_amp2.argument.observation                            =   inputms
apply_amp2.argument.parset                                 =   {{ parset_dir }}/facet_dirdep_amponly_apply.parset
apply_amp2.argument.catalog                                =   {{ skymodel_dir }}/empty.skymodel
apply_amp2.argument.parmdb                                 =   inputparmdb
apply_amp2.argument.replace-sourcedb                       =   True
apply_amp2.argument.replace-parmdb                         =   True

flag2.control.type                                         =   dppp_inplace
flag2.control.mapfiles_in                                  =   [concat_chunks.output.mapfile,select_single_cliplevel_cal.output.mapfile]
flag2.control.inputkeys                                    =   [msin,clip_level]
flag2.argument.msin.datacolumn                             =   CORRECTED_DATA
flag2.argument.msout                                       =   .
flag2.argument.steps                                       =   [flag]
flag2.argument.flag.type                                   =   preflagger
flag2.argument.flag.amplmax                                =   clip_level

create_compressed_mapfile_empty.control.kind               =   plugin
create_compressed_mapfile_empty.control.type               =   compressMapfile
create_compressed_mapfile_empty.control.mapfile_in         =   shift_empty.output.mapfile
create_compressed_mapfile_empty.control.mapfile_dir        =   {{ mapfile_dir }}
create_compressed_mapfile_empty.control.filename           =   shift_empty_compressed.datamap

average4.control.type                                      =   dppp
average4.control.mapfile_in                                =   create_chunks_map.output.mapfile
average4.control.inputkey                                  =   msin
average4.argument.msin.datacolumn                          =   CORRECTED_DATA
average4.argument.msout.overwrite                          =   True
average4.argument.msout.writefullresflag                   =   False
average4.argument.local_scratch_dir                        =   {{ local_dir }}
average4.argument.steps                                    =   [avg]
average4.argument.avg.type                                 =   squash
average4.argument.avg.freqstep                             =   1
average4.argument.avg.timestep                             =   {{ facetselfcal_timestep }}

create_compressed_mapfile4.control.kind                    =   plugin
create_compressed_mapfile4.control.type                    =   compressMapfile
create_compressed_mapfile4.control.mapfile_in              =   average4.output.mapfile
create_compressed_mapfile4.control.mapfile_dir             =   {{ mapfile_dir }}
create_compressed_mapfile4.control.filename                =   concat4_input.datamap

concat4.control.type                                       =   virtual_concat
concat4.control.mapfile_in                                 =   create_compressed_mapfile4.output.mapfile
concat4.control.inputkey                                   =   msfiles
concat4.control.outputkey                                  =   msconcat
concat4.argument.flags                                     =   [msfiles,msconcat]

delete_image.control.type                                  =   delete_image
delete_image.control.mapfile_in                            =   create_model3_map.output.mapfile
delete_image.control.inputkey                              =   imageroot
delete_image.argument.flags                                =   [imageroot,loop_ampcal.output.counter]

casa_image41.control.type                                  =   casa_clean
casa_image41.control.mapfile_in                            =   concat4.output.mapfile
casa_image41.control.inputkey                              =   clean.vis
casa_image41.control.outputkey                             =   clean.imagename
casa_image41.control.arguments                             =   [--nologger,--nogui,-c]
casa_image41.argument.clean.wprojplanes                    =   {{ cal_wplanes }}
casa_image41.argument.clean.uvrange                        =   '>80lambda'
casa_image41.argument.clean.nterms                         =   {{ nterms }}
casa_image41.argument.clean.niter                          =   1000
casa_image41.argument.clean.threshold                      =   '0mJy'
casa_image41.argument.clean.imsize                         =   [{{ cal_imsize }}, {{ cal_imsize }}]
casa_image41.argument.clean.cell                           =   ['1.5arcsec', '1.5arcsec']
casa_image41.argument.clean.robust                         =   -0.25
casa_image41.argument.clean.multiscale                     =   [0, 3, 7, 25, 60, 150]
casa_image41.argument.clean.selectdata                     =   True
casa_image41.argument.clean.gridmode                       =   'widefield'
casa_image41.argument.clean.interactive                    =   False
casa_image41.argument.clean.mode                           =   'mfs'
casa_image41.argument.clean.gain                           =   0.1
casa_image41.argument.clean.psfmode                        =   'clark'
casa_image41.argument.clean.imagermode                     =   'csclean'
casa_image41.argument.clean.ftmachine                      =   'mosaic'
casa_image41.argument.clean.mosweight                      =   False
casa_image41.argument.clean.scaletype                      =   'SAULT'
casa_image41.argument.clean.weighting                      =   'briggs'
casa_image41.argument.clean.uvtaper                        =   False
casa_image41.argument.clean.pbcor                          =   False
casa_image41.argument.clean.minpb                          =   0.2
casa_image41.argument.clean.npixels                        =   0
casa_image41.argument.clean.npercycle                      =   100
casa_image41.argument.clean.cyclefactor                    =   2.5
casa_image41.argument.clean.cyclespeedup                   =   -1
casa_image41.argument.clean.chaniter                       =   False
casa_image41.argument.clean.flatnoise                      =   True
casa_image41.argument.clean.allowchunk                     =   False
casa_image41.argument.clean.mask                           =   {{ region_selfcal }}

adjust_casa_mapfile4.control.kind                          =   plugin
adjust_casa_mapfile4.control.type                          =   appendMapfile
adjust_casa_mapfile4.control.mapfile_in                    =   casa_image41.output.casa_image41.image.mapfile
adjust_casa_mapfile4.control.append                        =   {{ casa_suffix }}
adjust_casa_mapfile4.control.mapfile_dir                   =   {{ mapfile_dir }}
adjust_casa_mapfile4.control.filename                      =   mask4_input.datamap

mask4.control.type                                         =   make_clean_mask
mask4.control.mapfile_in                                   =   adjust_casa_mapfile4.output.mapfile
mask4.control.inputkey                                     =   imagefile
mask4.control.outputkey                                    =   maskfile
mask4.argument.flags                                       =   [imagefile,maskfile]
mask4.argument.region_file                                 =   {{ region_selfcal }}
mask4.argument.threshpix                                   =   10
mask4.argument.threshisl                                   =   10
mask4.argument.iterate_threshold                           =   True
mask4.argument.atrous_do                                   =   {{ atrous_do }}
mask4.argument.rmsbox                                      =   (80,20)
mask4.argument.trim_by                                     =   0.2
mask4.argument.img_format                                  =   casa
mask4.argument.threshold_format                            =   str_with_units

casa_image42.control.type                                  =   casa_clean
casa_image42.control.mapfiles_in                           =   [concat4.output.mapfile,mask4.output.mapfile]
casa_image42.control.inputkeys                             =   [clean.vis,clean.mask]
casa_image42.control.outputkey                             =   clean.imagename
casa_image42.control.arguments                             =   [--nologger,--nogui,-c]
casa_image42.argument.clean.wprojplanes                    =   {{ cal_wplanes }}
casa_image42.argument.clean.uvrange                        =   '>80lambda'
casa_image42.argument.clean.nterms                         =   {{ nterms }}
casa_image42.argument.clean.niter                          =   1000
casa_image42.argument.clean.threshold                      =   '0mJy'
casa_image42.argument.clean.imsize                         =   [{{ cal_imsize }}, {{ cal_imsize }}]
casa_image42.argument.clean.cell                           =   ['1.5arcsec', '1.5arcsec']
casa_image42.argument.clean.robust                         =   -0.25
casa_image42.argument.clean.multiscale                     =   [0, 3, 7, 25, 60, 150]
casa_image42.argument.clean.selectdata                     =   True
casa_image42.argument.clean.gridmode                       =   'widefield'
casa_image42.argument.clean.interactive                    =   False
casa_image42.argument.clean.mode                           =   'mfs'
casa_image42.argument.clean.gain                           =   0.1
casa_image42.argument.clean.psfmode                        =   'clark'
casa_image42.argument.clean.imagermode                     =   'csclean'
casa_image42.argument.clean.ftmachine                      =   'mosaic'
casa_image42.argument.clean.mosweight                      =   False
casa_image42.argument.clean.scaletype                      =   'SAULT'
casa_image42.argument.clean.weighting                      =   'briggs'
casa_image42.argument.clean.uvtaper                        =   False
casa_image42.argument.clean.pbcor                          =   False
casa_image42.argument.clean.minpb                          =   0.2
casa_image42.argument.clean.npixels                        =   0
casa_image42.argument.clean.npercycle                      =   100
casa_image42.argument.clean.cyclefactor                    =   2.5
casa_image42.argument.clean.cyclespeedup                   =   -1
casa_image42.argument.clean.chaniter                       =   False
casa_image42.argument.clean.flatnoise                      =   True
casa_image42.argument.clean.allowchunk                     =   False

adjust_casa_mapfile5.control.kind                          =   plugin
adjust_casa_mapfile5.control.type                          =   appendMapfile
adjust_casa_mapfile5.control.mapfile_in                    =   casa_image42.output.casa_image42.image.mapfile
adjust_casa_mapfile5.control.append                        =   {{ casa_suffix }}
adjust_casa_mapfile5.control.mapfile_dir                   =   {{ mapfile_dir }}
adjust_casa_mapfile5.control.filename                      =   compare_image_input_new.datamap

copy_image.control.type                                    =   copy_image
copy_image.control.mapfile_in                              =   adjust_casa_mapfile5.output.mapfile
copy_image.control.inputkey                                =   image
copy_image.argument.flags                                  =   [image,loop_ampcal.output.counter]

check_image.control.type                                   =   compare_image_stats
check_image.control.mapfiles_in                            =   [adjust_casa_mapfile5.output.mapfile,copy_image.output.previous_image.mapfile]
check_image.control.inputkeys                              =   [image_new,image_prev]
check_image.argument.flags                                 =   [image_new,image_prev]

merge_selfcal_parmdbs.control.type                         =   merge_parmdbs_selfcal
merge_selfcal_parmdbs.control.mapfiles_in                  =   [merge_phase_parmdbs.output.mapfile,smooth_amp2.output.mapfile]
merge_selfcal_parmdbs.control.inputkeys                    =   [parmdb_p,parmdb_a]
merge_selfcal_parmdbs.control.outputkey                    =   parmdb_out
merge_selfcal_parmdbs.argument.flags                       =   [parmdb_p,parmdb_a,parmdb_out]

copy_merged_parmdb_map.control.kind                        =   plugin
copy_merged_parmdb_map.control.type                        =   copyMapfile
copy_merged_parmdb_map.control.mapfile_in                  =   merge_selfcal_parmdbs.output.mapfile
copy_merged_parmdb_map.control.mapfile_dir                 =   {{ mapfile_dir }}
copy_merged_parmdb_map.control.filename                    =   dir_dep_parmdb.datamap

expand_merged_parmdb_map.control.kind                      =   plugin
expand_merged_parmdb_map.control.type                      =   expandMapfile
expand_merged_parmdb_map.control.mapfile_in                =   merge_selfcal_parmdbs.output.mapfile
expand_merged_parmdb_map.control.mapfile_to_match          =   shift_empty.output.mapfile
expand_merged_parmdb_map.control.mapfile_dir               =   {{ mapfile_dir }}
expand_merged_parmdb_map.control.filename                  =   expand_merged_parmdbs.datamap

apply_dir_dep_fast.control.type                            =   calibrate-stand-alone_new
apply_dir_dep_fast.control.mapfiles_in                     =   [shift_empty.output.mapfile,expand_merged_parmdb_map.output.mapfile]
apply_dir_dep_fast.control.inputkeys                       =   [inputms,inputparmdb]
apply_dir_dep_fast.argument.observation                    =   inputms
apply_dir_dep_fast.argument.parset                         =   {{ parset_dir }}/facet_dirdep_apply_fast.parset
apply_dir_dep_fast.argument.catalog                        =   {{ skymodel_dir }}/empty.skymodel
apply_dir_dep_fast.argument.parmdb                         =   inputparmdb
apply_dir_dep_fast.argument.replace-sourcedb               =   True
apply_dir_dep_fast.argument.replace-parmdb                 =   True

apply_dir_dep_slow.control.type                            =   calibrate-stand-alone_new
apply_dir_dep_slow.control.mapfiles_in                     =   [shift_empty.output.mapfile,expand_merged_parmdb_map.output.mapfile]
apply_dir_dep_slow.control.inputkeys                       =   [inputms,inputparmdb]
apply_dir_dep_slow.argument.observation                    =   inputms
apply_dir_dep_slow.argument.parset                         =   {{ parset_dir }}/facet_dirdep_apply_slow.parset
apply_dir_dep_slow.argument.catalog                        =   {{ skymodel_dir }}/empty.skymodel
apply_dir_dep_slow.argument.parmdb                         =   inputparmdb
apply_dir_dep_slow.argument.replace-sourcedb               =   True
apply_dir_dep_slow.argument.replace-parmdb                 =   True

flag_full.control.type                                     =   dppp_inplace
flag_full.control.mapfiles_in                              =   [shift_empty.output.mapfile,make_facet_skymodels_all.output.clip_level_jy_all.mapfile]
flag_full.control.inputkeys                                =   [msin,clip_level]
flag_full.argument.msin.datacolumn                         =   CORRECTED_DATA
flag_full.argument.msout                                   =   .
flag_full.argument.steps                                   =   [flag]
flag_full.argument.flag.type                               =   preflagger
flag_full.argument.flag.amplmax                            =   clip_level

average5.control.type                                      =   dppp
average5.control.mapfile_in                                =   shift_empty.output.mapfile
average5.control.inputkey                                  =   msin
average5.argument.msin.datacolumn                          =   CORRECTED_DATA
average5.argument.msout.overwrite                          =   True
average5.argument.msout.writefullresflag                   =   False
average5.argument.local_scratch_dir                        =   {{ local_dir }}
average5.argument.steps                                    =   [avg]
average5.argument.avg.type                                 =   squash
average5.argument.avg.freqstep                             =   {{ facetimage_freqstep }}
average5.argument.avg.timestep                             =   {{ facetimage_timestep }}

create_compressed_mapfile5.control.kind                    =   plugin
create_compressed_mapfile5.control.type                    =   compressMapfile
create_compressed_mapfile5.control.mapfile_in              =   average5.output.mapfile
create_compressed_mapfile5.control.mapfile_dir             =   {{ mapfile_dir }}
create_compressed_mapfile5.control.filename                =   concat_averaged_input.datamap

{% block full_image_parms %}
concat_averaged.control.type                               =   dppp
concat_averaged.control.mapfile_in                         =   create_compressed_mapfile5.output.mapfile
concat_averaged.control.inputkey                           =   msin
concat_averaged.argument.msin.datacolumn                   =   DATA
concat_averaged.argument.msout.overwrite                   =   True
concat_averaged.argument.msout.writefullresflag            =   False
concat_averaged.argument.local_scratch_dir                 =   {{ local_dir }}
concat_averaged.argument.steps                             =   []

premask.control.type                                       =   make_clean_mask
premask.control.mapfile_in                                 =   adjust_casa_mapfile4.output.mapfile
premask.control.inputkey                                   =   imagefile
premask.control.outputkey                                  =   maskfile
premask.argument.flags                                     =   [imagefile,maskfile]
premask.argument.img_format                                =   fits
premask.argument.pad_to_size                               =   {{ facet_imsize }}
premask.argument.skip_source_detection                     =   True
premask.argument.vertices_file                             =   {{ vertices_file }}

wsclean_image_full1.control.type                           =   wsclean
wsclean_image_full1.control.mapfiles_in                    =   [concat_averaged.output.mapfile,premask.output.mapfile]
wsclean_image_full1.control.inputkeys                      =   [msfile,fitsmask]
wsclean_image_full1.argument.flags                         =   [-no-update-model-required,-multiscale,-fitbeam,-reorder,-joinchannels,msfile]
wsclean_image_full1.argument.fitsmask                      =   fitsmask
wsclean_image_full1.argument.size                          =   {{ facet_imsize }} {{ facet_imsize }}
wsclean_image_full1.argument.niter                         =   30000
wsclean_image_full1.argument.threshold                     =   0.0
wsclean_image_full1.argument.pol                           =   I
wsclean_image_full1.argument.weight                        =   briggs -0.5
wsclean_image_full1.argument.mgain                         =   0.6
wsclean_image_full1.argument.cleanborder                   =   0
wsclean_image_full1.argument.minuv-l                       =   80
wsclean_image_full1.argument.scale                         =   0.000417
wsclean_image_full1.argument.channelsout                   =   {{ nchannels }}
wsclean_image_full1.argument.mem                           =   {{ max_percent_memory }}
wsclean_image_full1.argument.j                             =   {{ max_cpus_per_node }}
wsclean_image_full1.argument.tempdir                       =   {{ local_dir }}

create_imagebase_map.control.kind                          =   plugin
create_imagebase_map.control.type                          =   trimMapfile
create_imagebase_map.control.mapfile_in                    =   wsclean_image_full1.output.wsclean_image_full1-image.fits.mapfile
create_imagebase_map.control.trim                          =   -
create_imagebase_map.control.mapfile_dir                   =   {{ mapfile_dir }}
create_imagebase_map.control.filename                      =   wsclean_image_full1_image_rootnames.datamap

adjust_wsclean_mapfile1.control.kind                       =   plugin
adjust_wsclean_mapfile1.control.type                       =   appendMapfile
adjust_wsclean_mapfile1.control.mapfile_in                 =   create_imagebase_map.output.mapfile
adjust_wsclean_mapfile1.control.append                     =   {{ wsclean_suffix }}
adjust_wsclean_mapfile1.control.mapfile_dir                =   {{ mapfile_dir }}
adjust_wsclean_mapfile1.control.filename                   =   final_image.datamap

copy_beam_info.control.type                                =   copy_beam_info
copy_beam_info.control.mapfile_in                          =   adjust_wsclean_mapfile1.output.mapfile
copy_beam_info.control.inputkey                            =   imagefile
copy_beam_info.argument.flags                              =   [imagefile]

mask5.control.type                                         =   make_clean_mask
mask5.control.mapfile_in                                   =   adjust_wsclean_mapfile1.output.mapfile
mask5.control.inputkey                                     =   imagefile
mask5.control.outputkey                                    =   maskfile
mask5.argument.flags                                       =   [imagefile,maskfile]
mask5.argument.threshisl                                   =   5
mask5.argument.threshpix                                   =   5
mask5.argument.rmsbox                                      =   (80,20)
mask5.argument.adaptive_rmsbox                             =   True
mask5.argument.atrous_do                                   =   True
mask5.argument.img_format                                  =   fits
mask5.argument.nsig                                        =   1.0
mask5.argument.vertices_file                               =   {{ vertices_file }}

wsclean_image_full2.control.type                           =   wsclean
wsclean_image_full2.control.mapfiles_in                    =   [concat_averaged.output.mapfile,mask5.output.mapfile,mask5.output.threshold_5sig.mapfile]
wsclean_image_full2.control.inputkeys                      =   [msfile,fitsmask,threshold]
wsclean_image_full2.argument.flags                         =   [-no-update-model-required,-multiscale,-fitbeam,-reorder,-joinchannels,msfile]
wsclean_image_full2.argument.fitsmask                      =   fitsmask
wsclean_image_full2.argument.size                          =   {{ facet_imsize }} {{ facet_imsize }}
wsclean_image_full2.argument.niter                         =   1000000
wsclean_image_full2.argument.threshold                     =   threshold
wsclean_image_full2.argument.pol                           =   I
wsclean_image_full2.argument.weight                        =   briggs -0.5
wsclean_image_full2.argument.mgain                         =   0.6
wsclean_image_full2.argument.cleanborder                   =   0
wsclean_image_full2.argument.minuv-l                       =   80
wsclean_image_full2.argument.scale                         =   0.000417
wsclean_image_full2.argument.channelsout                   =   {{ nchannels }}
wsclean_image_full2.argument.mem                           =   {{ max_percent_memory }}
wsclean_image_full2.argument.j                             =   {{ max_cpus_per_node }}
wsclean_image_full2.argument.tempdir                       =   {{ local_dir }}

create_model4_map.control.kind                             =   plugin
create_model4_map.control.type                             =   trimMapfile
create_model4_map.control.mapfile_in                       =   wsclean_image_full2.output.wsclean_image_full2-model.fits.mapfile
create_model4_map.control.trim                             =   -
create_model4_map.control.mapfile_dir                      =   {{ mapfile_dir }}
create_model4_map.control.filename                         =   final_model_rootnames.datamap

adjust_wsclean_mapfile2.control.kind                       =   plugin
adjust_wsclean_mapfile2.control.type                       =   appendMapfile
adjust_wsclean_mapfile2.control.mapfile_in                 =   create_model4_map.output.mapfile
adjust_wsclean_mapfile2.control.append                     =   {{ wsclean_suffix }}
adjust_wsclean_mapfile2.control.mapfile_dir                =   {{ mapfile_dir }}
adjust_wsclean_mapfile2.control.filename                   =   final_image.datamap

pad_model_images.control.type                              =   pad_image
pad_model_images.control.mapfile_in                        =   create_model4_map.output.mapfile
pad_model_images.control.inputkey                          =   imagefile
pad_model_images.argument.flags                            =   [imagefile]

create_expanded_model_mapfile.control.kind                 =   plugin
create_expanded_model_mapfile.control.type                 =   expandMapfile
create_expanded_model_mapfile.control.mapfile_in           =   create_model4_map.output.mapfile
create_expanded_model_mapfile.control.mapfile_to_match     =   shift_empty.output.mapfile
create_expanded_model_mapfile.control.mapfile_dir          =   {{ mapfile_dir }}
create_expanded_model_mapfile.control.filename             =   expand_wsclean_model.datamap

create_expanded_size_mapfile.control.kind                  =   plugin
create_expanded_size_mapfile.control.type                  =   expandMapfile
create_expanded_size_mapfile.control.mapfile_in            =   pad_model_images.output.padsize.mapfile
create_expanded_size_mapfile.control.mapfile_to_match      =   shift_empty.output.mapfile
create_expanded_size_mapfile.control.mapfile_dir           =   {{ mapfile_dir }}
create_expanded_size_mapfile.control.filename              =   expand_wsclean_model_size.datamap

wsclean_ft.control.type                                    =   wsclean_ft
wsclean_ft.control.mapfiles_in                             =   [shift_empty.output.mapfile,create_expanded_model_mapfile.output.mapfile,create_expanded_size_mapfile.output.mapfile]
wsclean_ft.control.inputkeys                               =   [msfile,name,size]
wsclean_ft.argument.flags                                  =   [-predict,msfile]
wsclean_ft.argument.scale                                  =   0.000417
wsclean_ft.argument.mem                                    =   {{ max_percent_memory }}
wsclean_ft.argument.channelsout                            =   {{ nchannels }}
wsclean_ft.argument.j                                      =   {{ max_cpus_per_node }}
{% endblock full_image_parms %}

corrupt_final_model.control.type                           =   dppp
corrupt_final_model.control.opts.mapfiles_in               =   [shift_empty.output.mapfile,expand_merged_parmdb_map.output.mapfile]
corrupt_final_model.control.opts.inputkeys                 =   [msin,parmdb]
corrupt_final_model.argument.msin.datacolumn               =   MODEL_DATA
corrupt_final_model.argument.msout.overwrite               =   True
corrupt_final_model.argument.msout.writefullresflag        =   False
corrupt_final_model.argument.local_scratch_dir             =   {{ local_dir }}
corrupt_final_model.argument.steps                         =   [corrupt_fast1,corrupt_fast2,corrupt_slow]
corrupt_final_model.argument.corrupt_fast1.type            =   applycal
corrupt_final_model.argument.corrupt_fast1.parmdb          =   parmdb
corrupt_final_model.argument.corrupt_fast1.correction      =   tec
corrupt_final_model.argument.corrupt_fast1.invert          =   False
corrupt_final_model.argument.corrupt_fast2.type            =   applycal
corrupt_final_model.argument.corrupt_fast2.parmdb          =   parmdb
corrupt_final_model.argument.corrupt_fast2.correction      =   commonscalarphase
corrupt_final_model.argument.corrupt_fast2.invert          =   False
corrupt_final_model.argument.corrupt_slow.type             =   applycal
corrupt_final_model.argument.corrupt_slow.parmdb           =   parmdb
corrupt_final_model.argument.corrupt_slow.invert           =   False

copy_final_model_map.control.kind                          =   plugin
copy_final_model_map.control.type                          =   copyMapfile
copy_final_model_map.control.mapfile_in                    =   corrupt_final_model.output.mapfile
copy_final_model_map.control.mapfile_dir                   =   {{ mapfile_dir }}
copy_final_model_map.control.filename                      =   final_model_data_facet.datamap

subtract_initial_final.control.type                        =   add_subtract_columns
subtract_initial_final.control.opts.mapfiles_in            =   [corrupt_all_model_data.output.mapfile,corrupt_final_model.output.mapfile]
subtract_initial_final.control.opts.inputkeys              =   [file1,file2]
subtract_initial_final.argument.flags                      =   [file1,file2,DATA,DATA,MODEL_DATA_DIFF,subtract]

shift_diff_model_to_field.control.type                     =   dppp
shift_diff_model_to_field.control.opts.mapfile_in          =   corrupt_all_model_data.output.mapfile
shift_diff_model_to_field.control.opts.inputkey            =   msin
shift_diff_model_to_field.argument.msin.datacolumn         =   MODEL_DATA_DIFF
shift_diff_model_to_field.argument.msout.overwrite         =   True
shift_diff_model_to_field.argument.msout.writefullresflag  =   False
shift_diff_model_to_field.argument.local_scratch_dir       =   {{ local_dir }}
shift_diff_model_to_field.argument.steps                   =   [shift]
shift_diff_model_to_field.argument.shift.type              =   phaseshifter
shift_diff_model_to_field.argument.shift.phasecenter       =   [{{ field_ra }}deg, {{ field_dec }}deg]

copy_diff_model_field_map.control.kind                     =   plugin
copy_diff_model_field_map.control.type                     =   copyMapfile
copy_diff_model_field_map.control.mapfile_in               =   shift_diff_model_to_field.output.mapfile
copy_diff_model_field_map.control.mapfile_dir              =   {{ mapfile_dir }}
copy_diff_model_field_map.control.filename                 =   diff_models_field.datamap

create_single_band_mapfile.control.kind                    =   plugin
create_single_band_mapfile.control.type                    =   filterMapfile
create_single_band_mapfile.control.mapfile_in              =   shift_empty.output.mapfile
create_single_band_mapfile.control.mapfile_dir             =   {{ mapfile_dir }}
create_single_band_mapfile.control.filename                =   single_band.datamap

create_single_model_mapfile.control.kind                   =   plugin
create_single_model_mapfile.control.type                   =   filterMapfile
create_single_model_mapfile.control.mapfile_in             =   corrupt_final_model.output.mapfile
create_single_model_mapfile.control.mapfile_dir            =   {{ mapfile_dir }}
create_single_model_mapfile.control.filename               =   single_model.datamap

subtract_single.control.type                               =   add_subtract_columns
subtract_single.control.opts.mapfiles_in                   =   [create_single_band_mapfile.output.mapfile,create_single_model_mapfile.output.mapfile]
subtract_single.control.opts.inputkeys                     =   [file1,file2]
subtract_single.argument.flags                             =   [file1,file2,FACET_DATA_ALL,DATA,SUBTRACTED_DATA,subtract]

average_pre.control.type                                   =   dppp
average_pre.control.mapfile_in                             =   create_single_band_mapfile.output.mapfile
average_pre.control.inputkey                               =   msin
average_pre.argument.msin.datacolumn                       =   DATA
average_pre.argument.msout.overwrite                       =   True
average_pre.argument.msout.writefullresflag                =   False
average_pre.argument.local_scratch_dir                     =   {{ local_dir }}
average_pre.argument.steps                                 =   [uv,avg]
average_pre.argument.uv.type                               =   uvwflagger
average_pre.argument.uv.uvmmax                             =   2500.0
average_pre.argument.avg.type                              =   squash
average_pre.argument.avg.freqstep                          =   {{ verify_freqstep }}
average_pre.argument.avg.timestep                          =   {{ verify_timestep }}

average_post.control.type                                  =   dppp
average_post.control.mapfile_in                            =   create_single_band_mapfile.output.mapfile
average_post.control.inputkey                              =   msin
average_post.argument.msin.datacolumn                      =   SUBTRACTED_DATA
average_post.argument.msout.overwrite                      =   True
average_post.argument.msout.writefullresflag               =   False
average_post.argument.local_scratch_dir                    =   {{ local_dir }}
average_post.argument.steps                                =   [uv,avg]
average_post.argument.uv.type                              =   uvwflagger
average_post.argument.uv.uvmmax                            =   2500.0
average_post.argument.avg.type                             =   squash
average_post.argument.avg.freqstep                         =   {{ verify_freqstep }}
average_post.argument.avg.timestep                         =   {{ verify_timestep }}

wsclean_pre.control.type                                   =   wsclean
wsclean_pre.control.mapfile_in                             =   average_pre.output.mapfile
wsclean_pre.control.inputkey                               =   msfile
wsclean_pre.argument.flags                                 =   [-no-update-model-required,msfile]
wsclean_pre.argument.size                                  =   2048 2048
wsclean_pre.argument.niter                                 =   10
wsclean_pre.argument.threshold                             =   0.0
wsclean_pre.argument.pol                                   =   I
wsclean_pre.argument.weight                                =   briggs -0.5
wsclean_pre.argument.mgain                                 =   0.5
wsclean_pre.argument.gain                                  =   0.1
wsclean_pre.argument.cleanborder                           =   0
wsclean_pre.argument.minuv-l                               =   80
wsclean_pre.argument.maxuv-l                               =   2500
wsclean_pre.argument.scale                                 =   0.00833
wsclean_pre.argument.mem                                   =   {{ max_percent_memory }}
wsclean_pre.argument.j                                     =   {{ max_cpus_per_node }}

wsclean_post.control.type                                  =   wsclean
wsclean_post.control.mapfile_in                            =   average_post.output.mapfile
wsclean_post.control.inputkey                              =   msfile
wsclean_post.argument.flags                                =   [-no-update-model-required,msfile]
wsclean_post.argument.size                                 =   2048 2048
wsclean_post.argument.niter                                =   10
wsclean_post.argument.threshold                            =   0.0
wsclean_post.argument.pol                                  =   I
wsclean_post.argument.weight                               =   briggs -0.5
wsclean_post.argument.mgain                                =   0.5
wsclean_post.argument.gain                                 =   0.1
wsclean_post.argument.cleanborder                          =   0
wsclean_post.argument.minuv-l                              =   80
wsclean_post.argument.maxuv-l                              =   2500
wsclean_post.argument.scale                                =   0.00833
wsclean_post.argument.mem                                  =   {{ max_percent_memory }}
wsclean_post.argument.j                                    =   {{ max_cpus_per_node }}

verify_subtract.control.type                               =   verify_subtract
verify_subtract.control.mapfiles_in                        =   [wsclean_pre.output.wsclean_pre-image.fits.mapfile,wsclean_post.output.wsclean_post-image.fits.mapfile]
verify_subtract.control.inputkeys                          =   [image_pre,image_post]
verify_subtract.argument.flags                             =   [image_pre,image_post,0.75]

copy_verify_subtract_pre_map.control.kind                  =   plugin
copy_verify_subtract_pre_map.control.type                  =   copyMapfile
copy_verify_subtract_pre_map.control.mapfile_in            =   verify_subtract.output.maxvalpre.mapfile
copy_verify_subtract_pre_map.control.mapfile_dir           =   {{ mapfile_dir }}
copy_verify_subtract_pre_map.control.filename              =   verify_subtract_maxval_pre.datamap

copy_verify_subtract_post_map.control.kind                 =   plugin
copy_verify_subtract_post_map.control.type                 =   copyMapfile
copy_verify_subtract_post_map.control.mapfile_in           =   verify_subtract.output.maxvalpost.mapfile
copy_verify_subtract_post_map.control.mapfile_dir          =   {{ mapfile_dir }}
copy_verify_subtract_post_map.control.filename             =   verify_subtract_maxval_post.datamap

copy_verify_subtract_break_map.control.kind                =   plugin
copy_verify_subtract_break_map.control.type                =   copyMapfile
copy_verify_subtract_break_map.control.mapfile_in          =   verify_subtract.output.break.mapfile
copy_verify_subtract_break_map.control.mapfile_dir         =   {{ mapfile_dir }}
copy_verify_subtract_break_map.control.filename            =   verify_subtract_OK.datamap
