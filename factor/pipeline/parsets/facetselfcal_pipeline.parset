pipeline.steps = [average0, casa_image01, mask01, casa_image02, mask02, casa_image03, create_model0_map, casa_ft0, make_chunks, create_chunks_map, solve_phaseonly1]

pipeline.pluginpath                         =   {{ pipeline_dir }}/plugins

average0.control.type                       =   dppp
average0.control.opts.mapfile_in            =   {{ shifted_cal_concat_datamap }}
average0.control.opts.inputkey              =   msin
average0.argument.msin.datacolumn           =   CORRECTED_DATA
average0.argument.msout.writefullresflag    =   False
average0.argument.steps                     =   [avg]
average0.argument.avg.type                  =   squash
average0.argument.avg.freqstep              =   1
average0.argument.avg.timestep              =   12

casa_image01.control.kind                   =   recipe
casa_image01.control.type                   =   casa
casa_image01.control.opts.mapfile_in        =   average0.output.mapfile
casa_image01.control.opts.inputkey          =   clean.vis
casa_image01.control.opts.outputkey         =   clean.imagename
casa_image01.control.opts.arguments         =   [--nologger,-c]
casa_image01.argument.clean.gridmode        =   'widefield'
casa_image01.argument.clean.wprojplanes     =   {{ wplanes }}
casa_image01.argument.clean.selectdata      =   True
casa_image01.argument.clean.uvrange         =   '>80lambda'
casa_image01.argument.clean.mode            =   'mfs'
casa_image01.argument.clean.nterms          =   2
casa_image01.argument.clean.niter           =   500
casa_image01.argument.clean.gain            =   0.01
casa_image01.argument.clean.threshold       =   '0mJy'
casa_image01.argument.clean.psfmode         =   'clark'
casa_image01.argument.clean.interactive     =   False
casa_image01.argument.clean.imsize          =   [{{ imsize }}, {{ imsize }}]
casa_image01.argument.clean.cell            =   ['1.5arcsec', '1.5arcsec']
casa_image01.argument.clean.weighting       =   'briggs'
casa_image01.argument.clean.robust          =   -0.25
casa_image01.argument.clean.uvtaper         =   False
casa_image01.argument.clean.pbcor           =   False
casa_image01.argument.clean.minpb           =   0.2
casa_image01.argument.clean.multiscale      =   [0, 3, 7, 25, 60, 150]

mask01.control.type                         =   make_clean_mask
mask01.control.outputkey                    =   outfile
mask01.argument.flags                       =   [casa_image01.output.casa_image01.image.tt0.mapfile,outfile]
mask01.argument.threshpix                   =   10
mask01.argument.threshisl                   =   6
mask01.argument.iterate_threshold           =   True
mask01.argument.atrous_do                   =   True
mask01.argument.rmsbox                      =   (50,20)
mask01.argument.img_format                  =   casa

casa_image02.control.kind                   =   recipe
casa_image02.control.type                   =   casa
casa_image02.control.opts.mapfiles_in       =   [average0.output.mapfile,mask01.output.mapfile]
casa_image02.control.opts.inputkeys         =   [clean.vis,clean.mask]
casa_image02.control.opts.outputkey         =   clean.imagename
casa_image02.control.opts.arguments         =   [--nologger,-c]
casa_image02.argument.clean.gridmode        =   'widefield'
casa_image02.argument.clean.wprojplanes     =   {{ wplanes }}
casa_image02.argument.clean.selectdata      =   True
casa_image02.argument.clean.uvrange         =   '>80lambda'
casa_image02.argument.clean.mode            =   'mfs'
casa_image02.argument.clean.nterms          =   2
casa_image02.argument.clean.niter           =   500
casa_image02.argument.clean.gain            =   0.01
casa_image02.argument.clean.threshold       =   '0mJy'
casa_image02.argument.clean.psfmode         =   'clark'
casa_image02.argument.clean.interactive     =   False
casa_image02.argument.clean.imsize          =   [{{ imsize }}, {{ imsize }}]
casa_image02.argument.clean.cell            =   ['1.5arcsec', '1.5arcsec']
casa_image02.argument.clean.weighting       =   'briggs'
casa_image02.argument.clean.robust          =   -0.25
casa_image02.argument.clean.uvtaper         =   False
casa_image02.argument.clean.pbcor           =   False
casa_image02.argument.clean.minpb           =   0.2
casa_image02.argument.clean.multiscale      =   [0, 3, 7, 25, 60, 150]

mask02.control.type                         =   make_clean_mask
mask02.control.outputkey                    =   outfile
mask02.argument.flags                       =   [casa_image02.output.casa_image02.image.tt0.mapfile,outfile]
mask02.argument.threshpix                   =   10
mask02.argument.threshisl                   =   6
mask01.argument.atrous_do                   =   True
mask02.argument.rmsbox                      =   (50,20)
mask02.argument.img_format                  =   casa

casa_image03.control.kind                   =   recipe
casa_image03.control.type                   =   casa
casa_image03.control.opts.mapfiles_in       =   [average0.output.mapfile,mask02.output.mapfile]
casa_image03.control.opts.inputkeys         =   [clean.vis,clean.mask]
casa_image03.control.opts.outputkey         =   clean.imagename
casa_image03.control.opts.arguments         =   [--nologger,-c]
casa_image03.argument.clean.gridmode        =   'widefield'
casa_image03.argument.clean.wprojplanes     =   {{ wplanes }}
casa_image03.argument.clean.selectdata      =   True
casa_image03.argument.clean.uvrange         =   '>80lambda'
casa_image03.argument.clean.mode            =   'mfs'
casa_image03.argument.clean.nterms          =   2
casa_image03.argument.clean.niter           =   1000000
casa_image03.argument.clean.gain            =   0.01
casa_image03.argument.clean.threshold       =   mask02.output.threshold_5sig.mapfile
casa_image03.argument.clean.psfmode         =   'clark'
casa_image03.argument.clean.interactive     =   False
casa_image03.argument.clean.imsize          =   [{{ imsize }}, {{ imsize }}]
casa_image03.argument.clean.cell            =   ['1.5arcsec', '1.5arcsec']
casa_image03.argument.clean.weighting       =   'briggs'
casa_image03.argument.clean.robust          =   -0.25
casa_image03.argument.clean.uvtaper         =   False
casa_image03.argument.clean.pbcor           =   False
casa_image03.argument.clean.minpb           =   0.2
casa_image03.argument.clean.multiscale      =   [0, 3, 7, 25, 60, 150]

create_model0_map.control.kind              =   plugin
create_model0_map.control.type              =   trimMapfile
create_model0_map.control.mapfile           =   casa_image03.output.casa_image03.model.tt0.mapfile
create_model0_map.control.trim              =   .model.tt0
create_model0_map.control.mapfile_dir       =   {{ mapfile_dir }}
create_model0_map.control.filename          =   model0_rootnames.datamap

casa_ft0.control.kind                       =   recipe
casa_ft0.control.type                       =   casa
casa_ft0.control.opts.mapfiles_in           =   [{{ shifted_cal_concat_datamap }},create_model0_map.output.mapfile]
casa_ft0.control.opts.inputkeys             =   [inputms,modelimg]
casa_ft0.control.opts.arguments             =   [--nologger,-c,%(factorroot)s/scripts/ftw.py,inputms,modelimg,2,{{ wplanes }},%(factorroot)s/scripts/ftw.xml,%(factorroot)s/scripts/task_ftw.py]

make_chunks.control.type                    =   chunk_by_time
make_chunks.argument.flags                  =   [{{ shifted_cal_concat_datamap }}]
make_chunks.argument.width                  =   {{ chunk_width }}

create_chunks_map.control.kind              =   plugin
create_chunks_map.control.type              =   addListMapfile
create_chunks_map.control.hosts             =   {{ hosts }}
create_chunks_map.control.files             =   make_chunks.output.files.mapfile
create_chunks_map.control.mapfile_dir       =   {{ mapfile_dir }}
create_chunks_map.control.filename          =   chunks.mapfile

solve_phaseonly1.control.type                            =   calibrate-stand-alone
solve_phaseonly1.control.mapfile_in                      =   create_ms_map.output.mapfile
solve_phaseonly1.control.inputkey                        =   inputms
solve_phaseonly1.control.arguments                       =   [--replace-sourcedb,inputms,{{ skymodel_dir }}/empty.skymodel]
solve_phaseonly1.control.args_format                     =   bbs
solve_phaseonly1.control.parset                          =   {{ parset_dir }}/subtract_lowres.parset
solve_phaseonly1.control.parsetasfile                    =   True
solve_phaseonly1.argument.Step.solve.Solve.CellSize.Time =   {{ solint_p }}

